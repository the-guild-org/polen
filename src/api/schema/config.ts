import type { Arr } from '@wollybeard/kit'
import type { Augmentations } from './augmentations/$.js'
import type { InputSources } from './input-sources/$.js'

export type DataSourceTypeNew = typeof InputSources[keyof typeof InputSources]['loader']['name']

export type InputSourceName =
  | `file`
  | `directory`
  | `versionedDirectory`
  | `memory`
  | `introspection`
  | `introspectionFile`

/**
 * Schema configuration for Polen.
 *
 * Polen supports multiple ways to load your GraphQL schema, from simple files
 * to dynamic introspection. Configure which sources to use and in what order.
 *
 * @example
 * ```ts
 * // Load from a file (default)
 * schema: {} // Looks for schema.graphql
 *
 * // Load via introspection
 * schema: {
 *   sources: {
 *     introspection: {
 *       url: 'https://api.example.com/graphql',
 *       headers: { 'Authorization': 'Bearer token' }
 *     }
 *   }
 * }
 *
 * // Try multiple sources in order
 * schema: {
 *   useSources: ['introspection', 'file'],
 *   sources: {
 *     introspection: { url: 'https://api.example.com/graphql' },
 *     file: { path: './fallback-schema.graphql' }
 *   }
 * }
 * ```
 */
export interface Config {
  /**
   * Whether to enable schema loading.
   *
   * Set to `false` to disable schema features entirely. This removes
   * the Reference and Changelog pages from your portal.
   *
   * @default true
   *
   * @example
   * ```ts
   * // Disable schema features
   * schema: { enabled: false }
   * ```
   */
  enabled?: boolean
  /**
   * Programmatically enhance your GraphQL schema documentation without modifying the schema files.
   *
   * Perfect for adding implementation details, usage examples, deprecation notices,
   * or any additional context that helps developers understand your API better.
   *
   * @example
   * ```ts
   * augmentations: [
   *   {
   *     type: 'description',
   *     on: {
   *       type: 'TargetType',
   *       name: 'User'
   *     },
   *     placement: 'after',
   *     content: '\n\nSee the [User Guide](/guides/users) for detailed usage.'
   *   },
   *   {
   *     type: 'description',
   *     on: {
   *       type: 'TargetField',
   *       targetType: 'Query',
   *       name: 'users'
   *     },
   *     placement: 'after',
   *     content: '\n\n**Rate limit:** 100 requests per minute'
   *   }
   * ]
   * ```
   */
  augmentations?: Augmentations.Augmentation[]
  /**
   * Which data sources to use for loading schemas.
   *
   * - `file` - Load from a single SDL file (default: `./schema.graphql`)
   * - `directory` - Load multiple SDL files from a directory (default: `./schema/`)
   * - `versionedDirectory` - Load versioned schemas from subdirectories (default: `./schema/`)
   * - `memory` - Use schemas defined in configuration
   * - `introspection` - Load schema via GraphQL introspection
   * - `introspectionFile` - Load schema from an introspection JSON file
   *
   * If not specified, Polen tries all sources in this order:
   * 1. `versionedDirectory` 2. `directory` 3. `file` 4. `memory` 5. `introspection` 6. `introspectionFile`
   *
   * @example
   * ```ts
   * // Use only file source
   * useSources: 'file'
   *
   * // Try multiple sources in custom order
   * useSources: ['introspection', 'file']
   *
   * // Default behavior (try all sources)
   * // useSources: undefined
   * ```
   */
  useSources?: Arr.Maybe<InputSourceName>
  /**
   * Configuration for each data source type.
   */
  sources?: {
    /**
     * Configuration for loading schema from a single SDL file.
     */
    file?: InputSources.File.Options
    /**
     * Configuration for loading multiple schema versions from a directory.
     */
    directory?: InputSources.Directory.Options
    /**
     * Configuration for loading versioned schemas from subdirectories.
     */
    versionedDirectory?: InputSources.VersionedDirectory.ConfigInput
    /**
     * Configuration for defining schemas programmatically.
     *
     * Accepts SDL strings, GraphQL schema objects, or pre-built SchemaHydrated objects.
     */
    memory?: InputSources.Memory.Options
    /**
     * Configuration for loading schema via GraphQL introspection.
     *
     * Introspection fetches your schema directly from a running GraphQL endpoint
     * and caches it in `.polen/cache/introspection/`.
     *
     * @example
     * ```ts
     * introspection: {
     *   url: 'https://api.example.com/graphql',
     *   headers: { 'Authorization': 'Bearer token' }
     * }
     * ```
     */
    introspection?: InputSources.Introspection.Options
    /**
     * Configuration for loading schema from an existing introspection file.
     *
     * Reads a pre-existing `schema.introspection.json` file from your project root.
     * This is useful when you have an introspection file generated by other tools.
     *
     * @example
     * ```ts
     * introspectionFile: {
     *   // Uses default path: ./schema.introspection.json
     * }
     * ```
     */
    introspectionFile?: InputSources.IntrospectionFile.Options
  }
}
