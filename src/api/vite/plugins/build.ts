import { Vite } from '#dep/vite/index.js'
import { ViteVirtual } from '#lib/vite-virtual/index.js'
import { Fs, Path, Str } from '@wollybeard/kit'
import type { Configurator } from '../../configurator/index.js'
import { isKitUnusedExternalImport, isRadixModuleLevelDirective } from '../log-filters.js'
import { vi } from '../vi.js'

const viServerEntry = vi([`server`, `entry.jsx`], { allowPluginProcessing: true })

export const Build = (config: Configurator.Config): Vite.Plugin[] => {
  let viteConfigResolved: Vite.ResolvedConfig

  // const outDir = Path.join(config.paths.project.rootDir, `dist`)

  return [Manifest(config), {
    name: `polen:build-client`,
    apply: `build`,
    applyToEnvironment: Vite.isEnvironmentClient,
    // HACK: For some reason the ?url import doesn't lead to a rewrite in the build.
    // Furthermore we need to rely on the manifest to get its final name because it is
    // generated by the client build before the server build.
    // However, we still need the asset in development.
    // But we cannot exclude the import in build.
    // So this does that for us but it is really hacky.
    // FIXME
    // 1. Raise issue about having ?url lead to expected build path rewrite?
    // 2. And: Move asset generation to server build?
    // 3. And/or: Use Vite Environments API?
    generateBundle(_, bundle, isWrite) {
      if (isWrite) {
        for (const chunkOrAsset of Object.values(bundle)) {
          if (chunkOrAsset.type === `asset` && chunkOrAsset.names.includes(`entry.client.jsx`)) {
            // eslint-disable-next-line
            delete bundle[chunkOrAsset.fileName]
          }
        }
      }
    },
    onLog(_, message) {
      if (isRadixModuleLevelDirective(message)) return
      if (isKitUnusedExternalImport(message)) return
    },
    config() {
      return {
        environments: {
          client: {
            build: {
              manifest: true,
              rollupOptions: {
                input: [config.paths.framework.template.entryClient],
                external: id => id.startsWith(`node:`),
                onwarn(message) {
                  if (isKitUnusedExternalImport(message)) return
                },
              },
            },
          },
        },
      }
    },
  }, {
    name: `polen-ssr-build`,
    apply: `build`,
    applyToEnvironment: Vite.isEnvironmentSsr,
    config() {
      return {
        ssr: {
          noExternal: true,
        },
        environments: {
          ssr: {
            build: {
              // Bundle all dependencies instead of externalizing them
              noExternal: true,
              // The SSR build will follow the client build, and emptying the dir would lose the output of the client build.
              emptyOutDir: false,
              rollupOptions: {
                input: viServerEntry.id,
              },
            },
          },
        },
      }
    },
    configResolved(config) {
      viteConfigResolved = config
    },
    ...ViteVirtual.IdentifiedLoader.toHooks(
      {
        identifier: viServerEntry,
        loader: () => {
          // Globs in Vite virtual modules must start with a slash
          const entrServeryViteGlobPath = `/`
            + Path.relative(config.paths.framework.rootDir, config.paths.framework.template.entryServer)
          const staticServingPaths = {
            // todo
            // relative from CWD of process that boots node server
            // can easily break! Use path relative in server??
            dirPath: `./dist`,
            routePath: `./${viteConfigResolved.build.assetsDir}/*`,
          }

          const code = Str.Builder()

          const _ = {
            app: `app`,
            entry: `entry`,
            entries: `entries`,
          }

          const honoPath = `hono`
          const honoNodeServerServeStaticPath = `@hono/node-server/serve-static`
          const honoNodeServerPath = `@hono/node-server`

          // TODO turn this into a file template
          code`import { Hono } from '${honoPath}'`
          code``
          code`const ${_.app} = new Hono()`
          code``
          code``
          code`// Static Files`
          code``
          code`import { serveStatic } from '${honoNodeServerServeStaticPath}'`
          code``
          code`${_.app}.use(
    				'${staticServingPaths.routePath}',
    				serveStatic({ root: '${staticServingPaths.dirPath}' })
    			)`
          code``
          code``
          code`// Entries`
          code``
          code`const ${_.entries} = import.meta.glob(
    				['${entrServeryViteGlobPath}'],
    				{ import: 'default', eager: true }
    			)`
          code``
          code`/** @see https://github.com/honojs/hono/issues/4051 */`
          code`const delegate = (app1, method, path, app2) => {
						app1.on(method, path, (c) => {
							// Throws if executionCtx is not available
							// https://hono.dev/docs/api/context#executionctx
							let maybeExecutionContext
							try { maybeExecutionContext = c.executionCtx }
							catch {}
							return app2.fetch(c.req.raw, c.env, maybeExecutionContext)
						})
					}`
          code`for (const ${_.entry} of Object.values(${_.entries})) {
						delegate(${_.app}, 'all', '*', ${_.entry})
    			}`
          code``
          code``
          code`// Start Server`
          code``
          code`import { serve } from '${honoNodeServerPath}'`
          code``

          const port = viteConfigResolved.server.port + 1
          code(`const port = process.env.PORT || ${port.toString()}`)
          code(`serve({ fetch: ${_.app}.fetch, port })`)

          return code.render()
        },
      },
    ),
    onLog(_, message) {
      if (isKitUnusedExternalImport(message)) return
    },

    // generateBundle(_, bundle, isWrite) {
    //   if (isWrite) {
    //     for (const chunkOrAsset of Object.values(bundle)) {
    //       console.log(chunkOrAsset)
    //       if (chunkOrAsset.type === `chunk`) {
    //         if (chunkOrAsset.facadeModuleId === viClientManifest.resolved) {
    //           // eslint-disable-next-line
    //           delete bundle[chunkOrAsset.fileName]
    //         }
    //       }
    //     }
    //   }
    // },
    async closeBundle() {
      /**
       * clean up the manifest. Was generated by client. For server build. Not needed after (unless debugging).
       */
      if (!config.advanced.debug) {
        await Fs.remove(Path.join(config.paths.project.buildDir, `.vite`))
      }
    },
  }]
}

const viClientManifest = vi([`vite`, `client`, `manifest`])

const Manifest = (config: Configurator.Config): Vite.Plugin => {
  let configEnv: Vite.ConfigEnv

  return {
    name: `polen-manifest`,
    config(_, configEnv_) {
      configEnv = configEnv_
    },
    ...ViteVirtual.IdentifiedLoader.toHooks(
      {
        identifier: viClientManifest,
        loader: async () => {
          // In development just return an empty manifest
          if (configEnv.mode === Vite.ModeName.development) {
            return `export default {}`
          }

          const manifestPath = Path.join(config.paths.project.buildDir, `.vite`, `manifest.json`)
          const module = await import(manifestPath, { with: { type: `json` } }) as {
            default: Vite.Manifest
          }

          return `export default ${JSON.stringify(module.default)}`
        },
      },
    ),
  }
}
