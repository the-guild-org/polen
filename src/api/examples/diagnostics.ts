import { Diagnostic } from '#lib/diagnostic/$'
import { S } from '#lib/kit-temp/effect'

// ============================================================================
// Schema - Examples Scanner Diagnostics
// ============================================================================

export const DiagnosticUnusedDefault = Diagnostic.create({
  source: 'examples-scanner',
  name: 'unused-default',
  severity: 'warning',
  context: {
    example: S.Struct({
      id: S.String,
      path: S.String,
    }),
    versions: S.Array(S.String),
  },
}).annotations({
  identifier: 'DiagnosticUnusedDefault',
  description: 'Default example file that is never used because explicit versions exist for all schema versions',
})

export const DiagnosticDuplicateContent = Diagnostic.create({
  source: 'examples-scanner',
  name: 'duplicate-content',
  severity: 'info',
  context: {
    example: S.Struct({
      id: S.String,
      path: S.String,
    }),
    duplicates: S.Array(S.Struct({
      version1: S.String,
      version2: S.String,
    })),
  },
}).annotations({
  identifier: 'DiagnosticDuplicateContent',
  description: 'Multiple versions of an example have identical content',
})

export const DiagnosticMissingVersions = Diagnostic.create({
  source: 'examples-scanner',
  name: 'missing-versions',
  severity: 'info',
  context: {
    example: S.Struct({
      id: S.String,
      path: S.String,
    }),
    providedVersions: S.Array(S.String),
    missingVersions: S.Array(S.String),
  },
}).annotations({
  identifier: 'DiagnosticMissingVersions',
  description: 'Example does not have explicit versions for all schema versions',
})

export const DiagnosticInvalidFilename = Diagnostic.create({
  source: 'examples-scanner',
  name: 'invalid-filename',
  severity: 'error',
  context: {
    file: S.String,
    reason: S.String,
  },
}).annotations({
  identifier: 'DiagnosticInvalidFilename',
  description: 'Example file has an invalid filename pattern',
})

// Union of all examples-scanner diagnostics
export const ExamplesScannerDiagnostic = S.Union(
  DiagnosticUnusedDefault,
  DiagnosticDuplicateContent,
  DiagnosticMissingVersions,
  DiagnosticInvalidFilename,
).annotations({
  identifier: 'ExamplesScannerDiagnostic',
  description: 'All diagnostics that can be generated by the examples scanner',
})

export type Diagnostic = S.Schema.Type<typeof ExamplesScannerDiagnostic>

// Individual diagnostic types
export type DiagnosticUnusedDefault = S.Schema.Type<typeof DiagnosticUnusedDefault>
export type DiagnosticDuplicateContent = S.Schema.Type<typeof DiagnosticDuplicateContent>
export type DiagnosticMissingVersions = S.Schema.Type<typeof DiagnosticMissingVersions>
export type DiagnosticInvalidFilename = S.Schema.Type<typeof DiagnosticInvalidFilename>
