import { Diagnostic } from '#lib/diagnostic/$'
import { GraphQLError } from '#lib/graphql-error/$'
import { S } from '#lib/kit-temp/effect'

// ============================================================================
// Schema - Examples Scanner Diagnostics
// ============================================================================

export const DiagnosticUnusedDefault = Diagnostic.create({
  source: 'examples-scanner',
  name: 'unused-default',
  severity: 'warning',
  context: {
    example: S.Struct({
      name: S.String,
      path: S.String,
    }),
    versions: S.Array(S.String),
  },
}).annotations({
  identifier: 'DiagnosticUnusedDefault',
  description: 'Default example file that is never used because explicit versions exist for all schema versions',
})
export const makeDiagnosticUnusedDefault = Diagnostic.createMake(DiagnosticUnusedDefault)

export const DiagnosticDuplicateContent = Diagnostic.create({
  source: 'examples-scanner',
  name: 'duplicate-content',
  severity: 'info',
  context: {
    example: S.Struct({
      name: S.String,
      path: S.String,
    }),
    duplicates: S.Array(S.Struct({
      version1: S.String,
      version2: S.String,
    })),
  },
}).annotations({
  identifier: 'DiagnosticDuplicateContent',
  description: 'Multiple versions of an example have identical content',
})
export const makeDiagnosticDuplicateContent = Diagnostic.createMake(DiagnosticDuplicateContent)

export const DiagnosticMissingVersions = Diagnostic.create({
  source: 'examples-scanner',
  name: 'missing-versions',
  severity: 'info',
  context: {
    example: S.Struct({
      name: S.String,
      path: S.String,
    }),
    providedVersions: S.Array(S.String),
    missingVersions: S.Array(S.String),
  },
}).annotations({
  identifier: 'DiagnosticMissingVersions',
  description: 'Example does not have explicit versions for all schema versions',
})
export const makeDiagnosticMissingVersions = Diagnostic.createMake(DiagnosticMissingVersions)

export const DiagnosticInvalidFilename = Diagnostic.create({
  source: 'examples-scanner',
  name: 'invalid-filename',
  severity: 'error',
  context: {
    file: S.String,
    reason: S.String,
  },
}).annotations({
  identifier: 'DiagnosticInvalidFilename',
  description: 'Example file has an invalid filename pattern',
})
export const makeDiagnosticInvalidFilename = Diagnostic.createMake(DiagnosticInvalidFilename)

// ============================================================================
// Schema - Examples Validation Diagnostics
// ============================================================================

export const DiagnosticValidationError = Diagnostic.create({
  source: 'examples-validation',
  name: 'invalid-graphql',
  severity: 'error', // Will be overridden based on config
  context: {
    example: S.Struct({
      name: S.String,
      path: S.String,
    }),
    version: S.String,
    errors: S.Array(GraphQLError.GraphQLError),
  },
}).annotations({
  identifier: 'DiagnosticValidationError',
  description: 'GraphQL document validation error against the schema',
})
export const makeDiagnosticValidationError = Diagnostic.createMake(DiagnosticValidationError)

// Union of all examples-scanner diagnostics
export const ExamplesScannerDiagnostic = S.Union(
  DiagnosticUnusedDefault,
  DiagnosticDuplicateContent,
  DiagnosticMissingVersions,
  DiagnosticInvalidFilename,
).annotations({
  identifier: 'ExamplesScannerDiagnostic',
  description: 'All diagnostics that can be generated by the examples scanner',
})

// Union of all examples diagnostics
export const ExamplesDiagnostic = S.Union(
  DiagnosticUnusedDefault,
  DiagnosticDuplicateContent,
  DiagnosticMissingVersions,
  DiagnosticInvalidFilename,
  DiagnosticValidationError,
).annotations({
  identifier: 'ExamplesDiagnostic',
  description: 'All diagnostics that can be generated for examples',
})

export type Diagnostic = S.Schema.Type<typeof ExamplesDiagnostic>

// Individual diagnostic types
export type DiagnosticUnusedDefault = S.Schema.Type<typeof DiagnosticUnusedDefault>
export type DiagnosticDuplicateContent = S.Schema.Type<typeof DiagnosticDuplicateContent>
export type DiagnosticMissingVersions = S.Schema.Type<typeof DiagnosticMissingVersions>
export type DiagnosticInvalidFilename = S.Schema.Type<typeof DiagnosticInvalidFilename>
export type DiagnosticValidationError = S.Schema.Type<typeof DiagnosticValidationError>
