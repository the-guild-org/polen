import { Configurator } from '../configurator/_namespace.js'
import { Vite } from '../lib/vite/_namespace.js'
import ReactVite from '@vitejs/plugin-react'
import { vi } from './helpers.js'
import { Build } from './build.js'
import { ViteVirtual } from '../lib/vite-virtual/_namespace.js'
import { readSchemaPointer } from '../configurator/schema-pointer.js'

const viAssetGraphqlSchema = vi([`assets`, `graphql-schema`])
const viTemplateVariables = vi([`template`, `variables`])
const viTemplateSchemaAugmentations = vi([`template`, `schema-augmentations`])

const codes = {
  MODULE_LEVEL_DIRECTIVE: `MODULE_LEVEL_DIRECTIVE`,
  CIRCULAR_DEPENDENCY: `CIRCULAR_DEPENDENCY`,
}

export const VitePlugin = (
  polenConfigInput?: Configurator.ConfigInput,
): Vite.PluginOption => {
  const polenConfig = Configurator.normalizeInput(polenConfigInput)
  return VitePluginInternal(polenConfig)
}

import * as HonoNodeServer from '@hono/node-server'
import type { Hono } from '../lib/hono/_namespace.js'

export const VitePluginInternal = (
  polenConfig: Configurator.Config,
): Vite.PluginOption => {
  const debug = true

  return [
    // HonoDevServer({
    //   entry: polenConfig.paths.appTemplate.entryServer,
    //   adapter: HonoDevServerNodeAdapter,
    // }),
    ReactVite(),
    ViteVirtual.Plugin(
      [viAssetGraphqlSchema, async () => {
        const schema = await readSchemaPointer(polenConfig.schema)
        const moduleContent = `export default ${JSON.stringify(schema)}`
        return moduleContent
      }],
      [viTemplateVariables, () => {
        const moduleContent = `export const templateVariables = ${
          JSON.stringify(polenConfig.templateVariables)
        }`
        return moduleContent
      }],
      [viTemplateSchemaAugmentations, () => {
        const moduleContent = `export const schemaAugmentations = ${
          JSON.stringify(polenConfig.schemaAugmentations)
        }`
        return moduleContent
      }],
    ),
    {
      name: `polen-dev-server`,
      apply: `serve`,
      async configureServer(server) {
        // Load our entry server

        let honoApp: Hono.Hono
        try {
          const ssrloadedModule = await server.ssrLoadModule(
            polenConfig.paths.appTemplate.entryServer,
          )
          honoApp = ssrloadedModule[`default`] as Hono.Hono
        } catch (cause) {
          if (cause instanceof Error) {
            server.ssrFixStacktrace(cause)
          }
          throw cause
        }

        // Add middleware that runs our entry server

        return () => {
          // console.log(server.middlewares.stack)
          server.middlewares.stack.splice(
            server.middlewares.stack.findIndex(m => m.handle.name === `viteHtmlFallbackMiddleware`),
            1,
          )
          // console.log(server.middlewares.stack)
          server.middlewares.use((req, res, _next) => {
            void HonoNodeServer.getRequestListener(async request => {
              // request.viteDevServer = server
              const response = await honoApp.fetch(request, { viteDevServer: server })
              return response
            })(req, res)
          })
        }
      },
      config() {
        return {
          // server: {
          // middlewareMode: true,
          // },
        }
      },
    },
    {
      name: `polen-build-client`,
      apply: `build`,
      applyToEnvironment: Vite.isEnvironmentClient,

      // HACK: For some reason the ?url import doesn't lead to a rewrite in the build.
      // Furthermore we need to rely on the manifest to get its final name because it is
      // generated by the client build before the server build.
      // However, we still need the asset in development.
      // But we cannot exclude the import in build.
      // So this does that for us but it is really hacky.
      // FIXME
      // 1. Raise issue about having ?url lead to expected build path rewrite?
      // 2. And: Move asset generation to server build?
      // 3. And/or: Use Vite Environments API?
      generateBundle(_, bundle, isWrite) {
        if (isWrite) {
          for (const chunkOrAsset of Object.values(bundle)) {
            if (chunkOrAsset.type === `asset` && chunkOrAsset.names.includes(`entry.client.jsx`)) {
              // eslint-disable-next-line
              delete bundle[chunkOrAsset.fileName]
            }
          }
        }
      },
      onLog(level, message) {
        if (
          level === `warn` && message.code === codes.MODULE_LEVEL_DIRECTIVE &&
          message.id?.includes(`@radix-ui`)
        ) return
      },
      config() {
        return {
          environments: {
            client: {
              build: {
                minify: !debug,
                manifest: true,
                rollupOptions: {
                  input: [polenConfig.paths.appTemplate.entryClient],
                },
              },
            },
          },
        }
      },
    },
    Build({
      entryServerPath: polenConfig.paths.appTemplate.entryServer,
      debug: debug,
    }),
  ]
}
