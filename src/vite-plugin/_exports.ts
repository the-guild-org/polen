import { Configurator } from './configurator/_namespace.js'
import { Vite } from '../lib/vite/_namespace.js'
import ReactVite from '@vitejs/plugin-react'
import { Fs } from '../lib/fs/_namespace.js'
import { virtualIdentifier } from './helpers.js'
import { Build } from './build.js'
import { nodeAdapter as HonoDevServerNodeAdapter } from '@hono/vite-dev-server/node'
import HonoDevServer from '@hono/vite-dev-server'

const virtualIdentifierAssetGraphqlSchema = virtualIdentifier([`assets`, `graphql-schema`])

const codes = {
  MODULE_LEVEL_DIRECTIVE: `MODULE_LEVEL_DIRECTIVE`,
  CIRCULAR_DEPENDENCY: `CIRCULAR_DEPENDENCY`,
}

export const VitePlugin = (
  polenConfigInput?: Configurator.ConfigInput,
): Vite.PluginOption[] => {
  const polenConfig = Configurator.normalizeInput(polenConfigInput)
  const debug = true

  return [
    HonoDevServer({
      entry: polenConfig.paths.appTemplate.entryServer,
      adapter: HonoDevServerNodeAdapter,
    }),
    ReactVite(),
    {
      name: `polen-virtual-graphql-schema`,
      ...Vite.VirtualIdentifier.toHooks(virtualIdentifierAssetGraphqlSchema, async () => {
        const schema = await Fs.readFile(polenConfig.schema.path, `utf-8`)
        const moduleContent = `export default ${JSON.stringify(schema)}`
        return moduleContent
      }),
    },
    {
      name: `polen-build-client`,
      apply: `build`,
      applyToEnvironment: Vite.isEnvironmentClient,
      // HACK: For some reason the ?url import doesn't lead to a rewrite in the build.
      // Furthermore we need to rely on the manifest to get its final name because it is
      // generated by the client build before the server build.
      // However, we still need the asset in development.
      // But we cannot exclude the import in build.
      // So this does that for us but it is really hacky.
      // FIXME
      // 1. Raise issue about having ?url lead to expected build path rewrite?
      // 2. And: Move asset generation to server build?
      // 3. And/or: Use Vite Environments API?
      generateBundle(_, bundle, isWrite) {
        if (isWrite) {
          for (const chunkOrAsset of Object.values(bundle)) {
            if (chunkOrAsset.type === `asset` && chunkOrAsset.names.includes(`entry.client.jsx`)) {
              // eslint-disable-next-line
              delete bundle[chunkOrAsset.fileName]
            }
          }
        }
      },
      onLog(level, message) {
        if (
          level === `warn` && message.code === codes.MODULE_LEVEL_DIRECTIVE &&
          message.id?.includes(`@radix-ui`)
        ) return
      },
      config() {
        return {
          environments: {
            client: {
              build: {
                minify: !debug,
                manifest: true,
                rollupOptions: {
                  input: [polenConfig.paths.appTemplate.entryClient],
                },
              },
            },
          },
        }
      },
    },
    Build({
      entryServerPath: polenConfig.paths.appTemplate.entryServer,
      debug: debug,
    }),
  ]
}
