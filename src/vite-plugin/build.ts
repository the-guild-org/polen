import { CodeBuilder } from '../lib/code-builder/_namespace.js'
import { Fs } from '../lib/fs/_namespace.js'
import { Path } from '../lib/path/_namespace.js'
import { Vite } from '../lib/vite/_namespace.js'
import { virtualIdentifier } from './helpers.js'
import { defu } from 'defu'

const viServerEntry = virtualIdentifier([`server`, `entry`])

export const Build = (parameters: {
  entryServerPath: string,
  debug?: boolean,
}): Vite.Plugin[] => {
  const config = defu(parameters, { debug: false })
  let viteConfigResolved: Vite.ResolvedConfig

  return [Manifest(), {
    name: `polen-ssr-build`,
    apply: `build`,
    applyToEnvironment: Vite.isEnvironmentSsr,
    configResolved(config) {
      viteConfigResolved = config
    },
    ...Vite.VirtualIdentifier.toHooks$FromMap(
      new Map([
        [viServerEntry, () => {
          const serverPort = viteConfigResolved.server.port + 1

          const entryServerPath = Path.absolutify(
            config.entryServerPath,
            viteConfigResolved.root,
          )
          const entrServeryViteGlobPath = `/` +
            Path.relative(viteConfigResolved.root, entryServerPath)
          const staticServingPaths = {
            // todo
            // relative from CWD of process that boots node server
            // can easily break! Use path relative in server??
            dirPath: `./dist`,
            routePath: `/${viteConfigResolved.build.assetsDir}/*`,
          }

          const code = CodeBuilder.create()

          const _ = {
            app: `app`,
            entry: `entry`,
            entries: `entries`,
          }

          code(`import { Hono } from 'hono'`)
          code(``)
          code(`const ${_.app} = new Hono()`)
          code(``)
          code(``)
          code(`// Static Files`)
          code(``)
          code(`import { serveStatic } from '@hono/node-server/serve-static'`)
          code(``)
          code(`${_.app}.use(
    				'${staticServingPaths.routePath}',
    				serveStatic({ root: '${staticServingPaths.dirPath}' })
    			)`)
          code(``)
          code(``)
          code(`// Entries`)
          code(``)
          code(`const ${_.entries} = import.meta.glob(
    				['${entrServeryViteGlobPath}'],
    				{ import: 'default', eager: true }
    			)`)
          code(``)
          code(`/** @see https://github.com/honojs/hono/issues/4051 */`)
          code(`const delegate = (app1, method, path, app2) => {
						app1.on(method, path, (c) => {
							// Throws if executionCtx is not available
							// https://hono.dev/docs/api/context#executionctx
							let maybeExecutionContext
							try { maybeExecutionContext = c.executionCtx }
							catch {}
							return app2.fetch(c.req.raw, c.env, maybeExecutionContext)
						})
					}`)
          code(`for (const ${_.entry} of Object.values(${_.entries})) {
						delegate(${_.app}, 'all', '*', ${_.entry})
    			}`)
          code(``)
          code(``)
          code(`// Start Server`)
          code(``)
          code(`import { serve } from '@hono/node-server'`)
          code(`serve({ fetch: ${_.app}.fetch, port: ${serverPort.toString()} })`)

          return code.render()
        }],
      ]),
    ),
    config() {
      return {
        environments: {
          ssr: {
            build: {
              emptyOutDir: false,
              minify: !config.debug,
              rollupOptions: {
                input: viServerEntry.id,
              },
            },
          },
        },
      }
    },
    // generateBundle(_, bundle, isWrite) {
    //   if (isWrite) {
    //     for (const chunkOrAsset of Object.values(bundle)) {
    //       console.log(chunkOrAsset)
    //       if (chunkOrAsset.type === `chunk`) {
    //         if (chunkOrAsset.facadeModuleId === viClientManifest.resolved) {
    //           // eslint-disable-next-line
    //           delete bundle[chunkOrAsset.fileName]
    //         }
    //       }
    //     }
    //   }
    // },
    async closeBundle() {
      /**
       * clean up the manifest. Was generated by client. For server build. Not needed after (unless debugging).
       */
      if (!config.debug) {
        await Fs.rmDirIfExists(
          Path.join(viteConfigResolved.root, viteConfigResolved.build.outDir, `.vite`),
        )
      }
    },
  }]
}

const viClientManifest = virtualIdentifier([`vite`, `client`, `manifest`])

const Manifest = (): Vite.Plugin => {
  let configEnv: Vite.ConfigEnv
  let viteConfigResolved: Vite.ResolvedConfig
  return {
    name: `polen-manifest`,
    config(_, configEnv_) {
      configEnv = configEnv_
    },
    configResolved(config) {
      viteConfigResolved = config
    },
    ...Vite.VirtualIdentifier.toHooks$FromMap(
      new Map([
        [viClientManifest, async () => {
          // In development or client build just return an empty manifest
          if (configEnv.mode === Vite.ModeName.dev) {
            return `export default {}`
          }

          const manifestPath = Path.join(
            viteConfigResolved.root,
            viteConfigResolved.build.outDir,
            `.vite`,
            `manifest.json`,
          )
          const module = await import(manifestPath, { with: { type: `json` } }) as {
            default: Vite.Manifest,
          }

          return `export default ${JSON.stringify(module.default)}`
        }],
      ]),
    ),
  }
}
