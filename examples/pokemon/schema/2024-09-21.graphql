"""
A Pokemon creature with enhanced battle capabilities and trainer relationships
"""
type Pokemon {
  id: ID!
  name: String!
  types: [PokemonType!]!
  """
  Base stats that determine Pokemon's potential
  """
  stats: Stats!
  evolution: Evolution
  abilities: [Ability!]!
  moves: [Move!]!
  trainer: Trainer
  level: Int!
  experience: Int!
  """
  Shiny Pokemon have alternate colorations
  """
  isShiny: Boolean!
  """
  Individual values that make each Pokemon unique
  """
  ivs: IVStats!
  """
  Nature affects stat growth
  """
  nature: Nature!
  """
  Held item
  """
  heldItem: Item
  """
  Current status condition
  """
  status: StatusCondition
  """
  Friendship level affects certain evolutions
  """
  friendship: Int!
}

"""
Evolution information for Pokemon
"""
type Evolution {
  to: Pokemon!
  method: EvolutionMethod!
  level: Int
  item: Item
  condition: String
}

"""
Methods of evolution
"""
enum EvolutionMethod {
  LEVEL_UP
  ITEM
  TRADE
  FRIENDSHIP
  LOCATION
  TIME_OF_DAY
}

"""
Base stats for Pokemon
"""
type Stats {
  hp: Int!
  attack: Int!
  defense: Int!
  speed: Int!
  specialAttack: Int!
  specialDefense: Int!
}

"""
Pokemon natures that affect stat growth
"""
enum Nature {
  HARDY
  LONELY
  BRAVE
  ADAMANT
  NAUGHTY
  BOLD
  DOCILE
  RELAXED
  IMPISH
  LAX
  TIMID
  HASTY
  SERIOUS
  JOLLY
  NAIVE
  MODEST
  MILD
  QUIET
  BASHFUL
  RASH
  CALM
  GENTLE
  SASSY
  CAREFUL
  QUIRKY
}

"""
Individual Values for Pokemon stats
"""
type IVStats {
  hp: Int!
  attack: Int!
  defense: Int!
  speed: Int!
  specialAttack: Int!
  specialDefense: Int!
}

"""
Pokemon trainers who catch and train Pokemon
"""
type Trainer {
  id: ID!
  name: String!
  badges: [Badge!]!
  pokemon: [Pokemon!]!
  hometown: String!
  """
  Trainer's win/loss record
  """
  battleRecord: BattleRecord!
  """
  Items in trainer's bag
  """
  items: [Item!]!
  """
  Money earned from battles
  """
  money: Int!
  """
  Trainer class determines battle style
  """
  trainerClass: TrainerClass!
  """
  Team for competitive battles
  """
  battleTeam: [Pokemon!]!
}

"""
Different trainer classes
"""
enum TrainerClass {
  ACE_TRAINER
  POKEMON_BREEDER
  YOUNGSTER
  LASS
  VETERAN
  GYM_LEADER
  ELITE_FOUR
  CHAMPION
  SCIENTIST
  TEAM_ROCKET
}

"""
Items that can be used or held by Pokemon
"""
interface Item {
  id: ID!
  name: String!
  description: String!
  price: Int!
}

"""
Items that restore HP or cure status conditions
"""
type HealingItem implements Item {
  id: ID!
  name: String!
  description: String!
  price: Int!
  hpRestore: Int
  curesStatus: [StatusCondition!]
}

"""
Pokeballs used to catch Pokemon
"""
type Pokeball implements Item {
  id: ID!
  name: String!
  description: String!
  price: Int!
  catchRate: Float!
}

"""
Berries that Pokemon can hold and consume
"""
type Berry implements Item {
  id: ID!
  name: String!
  description: String!
  price: Int!
  effect: BerryEffect!
  power: Int!
}

"""
Evolution stones
"""
type EvolutionStone implements Item {
  id: ID!
  name: String!
  description: String!
  price: Int!
  evolvesTypes: [PokemonType!]!
}

"""
Different berry effects
"""
enum BerryEffect {
  RESTORE_HP
  CURE_PARALYSIS
  CURE_BURN
  CURE_FREEZE
  CURE_POISON
  CURE_SLEEP
  BOOST_ATTACK
  BOOST_DEFENSE
  BOOST_SPEED
  BOOST_SP_ATTACK
  BOOST_SP_DEFENSE
}

"""
Status conditions that can affect Pokemon
"""
enum StatusCondition {
  PARALYSIS
  BURN
  FREEZE
  POISON
  BADLY_POISONED
  SLEEP
  CONFUSION
  FAINTED
}

"""
Win/loss statistics for trainers
"""
type BattleRecord {
  wins: Int!
  losses: Int!
  draws: Int!
  """
  Longest win streak
  """
  winStreak: Int!
  """
  Total battles
  """
  totalBattles: Int!
  """
  Win percentage
  """
  winRate: Float!
}

"""
Gym badges earned by defeating gym leaders
"""
type Badge {
  id: ID!
  name: String!
  gymLeader: Trainer!
  city: String!
  """
  The primary type of the gym
  """
  gymType: PokemonType!
  """
  Date when the badge was earned
  """
  earnedDate: String!
  """
  Battle difficulty rating
  """
  difficulty: Int!
}

"""
Special abilities that Pokemon can have
"""
type Ability {
  id: ID!
  name: String!
  description: String!
  isHidden: Boolean!
  """
  Battle effect description
  """
  battleEffect: String!
}

"""
Moves that Pokemon can learn and use in battle
"""
type Move {
  id: ID!
  name: String!
  type: PokemonType!
  power: Int
  accuracy: Int!
  pp: Int!
  category: MoveCategory!
  """
  Some moves have secondary effects
  """
  effect: String
  """
  Priority determines move order
  """
  priority: Int!
  """
  Chance of causing a critical hit
  """
  criticalHitRatio: Float!
  """
  Status condition this move may inflict
  """
  inflictsStatus: StatusCondition
  """
  Chance of inflicting status
  """
  statusChance: Float
}

enum MoveCategory {
  PHYSICAL
  SPECIAL
  STATUS
}

enum PokemonType {
  NORMAL
  FIRE
  WATER
  GRASS
  ELECTRIC
  PSYCHIC
  DARK
  FAIRY
  FIGHTING
  STEEL
  DRAGON
  GHOST
  ICE
  ROCK
  GROUND
  FLYING
  POISON
  BUG
}

"""
Battle between two trainers
"""
type Battle {
  id: ID!
  trainer1: Trainer!
  trainer2: Trainer!
  winner: Trainer
  startTime: String!
  endTime: String
  """
  Battle format
  """
  format: BattleFormat!
  """
  Weather condition during battle
  """
  weather: Weather
  """
  Terrain effect active
  """
  terrain: Terrain
  """
  Turn count
  """
  turns: Int!
  """
  Battle log entries
  """
  log: [BattleLogEntry!]!
}

"""
Entry in the battle log
"""
type BattleLogEntry {
  turn: Int!
  action: String!
  damage: Int
  pokemon: Pokemon!
}

"""
Terrain effects in battle
"""
enum Terrain {
  NORMAL
  ELECTRIC
  GRASSY
  MISTY
  PSYCHIC
}

"""
Weather conditions that affect battles
"""
enum Weather {
  CLEAR
  SUNNY
  RAIN
  SANDSTORM
  HAIL
  FOG
  HARSH_SUNLIGHT
  HEAVY_RAIN
}

"""
Different battle formats
"""
enum BattleFormat {
  SINGLE
  DOUBLE
  TRIPLE
  ROTATION
  HORDE
  RAID
}

"""
Pokemon regions
"""
enum Region {
  KANTO
  JOHTO
  HOENN
  SINNOH
  UNOVA
  KALOS
  ALOLA
  GALAR
  PALDEA
}

"""
Pokemon egg groups for breeding
"""
enum EggGroup {
  MONSTER
  WATER_1
  WATER_2
  WATER_3
  BUG
  FLYING
  FIELD
  FAIRY
  GRASS
  HUMAN_LIKE
  MINERAL
  AMORPHOUS
  DRAGON
  DITTO
  NO_EGGS
}

"""
Pokemon breeding information
"""
type BreedingInfo {
  eggGroups: [EggGroup!]!
  hatchTime: Int!
  genderRatio: GenderRatio!
}

"""
Gender ratio for Pokemon species
"""
type GenderRatio {
  malePercent: Float!
  femalePercent: Float!
  genderless: Boolean!
}

type Query {
  pokemon(id: ID!): Pokemon
  allPokemon(limit: Int = 100, offset: Int = 0, sortBy: PokemonSortField): [Pokemon!]!
  """
  Search for Pokemon by type
  """
  pokemonByType(type: PokemonType!, region: Region): [Pokemon!]!
  ability(id: ID!): Ability
  move(id: ID!): Move
  trainer(id: ID!): Trainer
  """
  Find Pokemon by trainer
  """
  pokemonByTrainer(trainerId: ID!): [Pokemon!]!
  """
  Get current ongoing battles
  """
  activeBattles: [Battle!]!
  """
  Search for shiny Pokemon
  """
  shinyPokemon: [Pokemon!]!
  """
  Get item by ID
  """
  item(id: ID!): Item
  """
  Search Pokemon by nature
  """
  pokemonByNature(nature: Nature!): [Pokemon!]!
  """
  Get all gym leaders
  """
  gymLeaders(region: Region): [Trainer!]!
  """
  Search Pokemon by ability
  """
  pokemonByAbility(abilityId: ID!): [Pokemon!]!
  """
  Get breeding compatibility
  """
  breedingCompatibility(pokemon1Id: ID!, pokemon2Id: ID!): BreedingCompatibility!
}

"""
Breeding compatibility between two Pokemon
"""
type BreedingCompatibility {
  compatible: Boolean!
  sharedEggGroups: [EggGroup!]!
  possibleEggMoves: [Move!]!
}

"""
Fields to sort Pokemon by
"""
enum PokemonSortField {
  NAME
  NUMBER
  TOTAL_STATS
  HP
  ATTACK
  DEFENSE
  SPEED
}

type Mutation {
  """
  Catch a wild Pokemon
  """
  catchPokemon(pokemonId: ID!, trainerId: ID!, pokeball: ID!): CatchResult!
  """
  Teach a move to a Pokemon
  """
  teachMove(pokemonId: ID!, moveId: ID!, replaceMove: ID): TeachMoveResult!
  """
  Register a new trainer
  """
  registerTrainer(input: RegisterTrainerInput!): Trainer!
  """
  Start a battle between two trainers
  """
  startBattle(input: StartBattleInput!): Battle!
  """
  End a battle and declare a winner
  """
  endBattle(battleId: ID!, winnerId: ID!): Battle!
  """
  Use an item on a Pokemon
  """
  useItem(itemId: ID!, pokemonId: ID!): UseItemResult!
  """
  Trade Pokemon between trainers
  """
  tradePokemon(pokemon1Id: ID!, pokemon2Id: ID!): TradeResult!
  """
  Evolve a Pokemon
  """
  evolvePokemon(pokemonId: ID!, method: EvolutionMethod!, itemId: ID): EvolveResult!
  """
  Breed two Pokemon
  """
  breedPokemon(parent1Id: ID!, parent2Id: ID!): BreedResult!
  """
  Nickname a Pokemon
  """
  nicknamePokemon(pokemonId: ID!, nickname: String!): Pokemon!
}

"""
Input for starting a battle
"""
input StartBattleInput {
  trainer1Id: ID!
  trainer2Id: ID!
  format: BattleFormat!
  weather: Weather
  terrain: Terrain
  timeLimit: Int
}

"""
Input for registering a new trainer
"""
input RegisterTrainerInput {
  name: String!
  hometown: String!
  startingRegion: Region!
  trainerClass: TrainerClass!
}

type CatchResult {
  success: Boolean!
  pokemon: Pokemon
  message: String!
  """
  Experience gained by participating Pokemon
  """
  experienceGained: Int!
}

type TeachMoveResult {
  success: Boolean!
  pokemon: Pokemon
  move: Move
  replacedMove: Move
}

type UseItemResult {
  success: Boolean!
  message: String!
  pokemon: Pokemon
}

type TradeResult {
  success: Boolean!
  pokemon1: Pokemon!
  pokemon2: Pokemon!
  message: String!
  """
  Pokemon that evolved due to trade
  """
  evolutions: [Pokemon!]
}

type EvolveResult {
  success: Boolean!
  evolvedPokemon: Pokemon
  message: String!
  """
  Moves learned upon evolution
  """
  learnedMoves: [Move!]!
}

type BreedResult {
  success: Boolean!
  egg: Pokemon
  message: String!
  hatchTime: Int!
  inheritedMoves: [Move!]!
}

"""
Real-time battle updates
"""
type Subscription {
  battleUpdates(battleId: ID!): BattleUpdate!
  """
  Subscribe to new Pokemon sightings
  """
  pokemonSighted(region: Region!): Pokemon!
  """
  Trade requests for a trainer
  """
  tradeRequests(trainerId: ID!): TradeRequest!
  """
  Egg hatching updates
  """
  eggHatching(trainerId: ID!): EggHatchUpdate!
}

"""
Updates during a battle
"""
type BattleUpdate {
  battleId: ID!
  message: String!
  pokemon1Hp: Int!
  pokemon2Hp: Int!
  currentTurn: Int!
  weather: Weather!
  terrain: Terrain
}

"""
Trade request between trainers
"""
type TradeRequest {
  id: ID!
  fromTrainer: Trainer!
  toTrainer: Trainer!
  offeredPokemon: Pokemon!
  requestedPokemon: Pokemon
  status: TradeStatus!
  expiresAt: String!
}

"""
Status of a trade request
"""
enum TradeStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  EXPIRED
}

"""
Egg hatching progress update
"""
type EggHatchUpdate {
  egg: Pokemon!
  stepsRemaining: Int!
  percentComplete: Float!
  estimatedHatchTime: String!
}

"""
Input for creating a new Pokemon
"""
input CreatePokemonInput {
  name: String!
  types: [PokemonType!]!
  stats: StatsInput!
  nature: Nature!
  abilities: [ID!]!
}

"""
Input for Pokemon stats
"""
input StatsInput {
  hp: Int!
  attack: Int!
  defense: Int!
  speed: Int!
  specialAttack: Int!
  specialDefense: Int!
}

directive @auth(role: String!) on FIELD_DEFINITION
directive @cache(ttl: Int!) on FIELD_DEFINITION
directive @rateLimit(limit: Int!, duration: Int!) on FIELD_DEFINITION
directive @complexity(value: Int!) on FIELD_DEFINITION