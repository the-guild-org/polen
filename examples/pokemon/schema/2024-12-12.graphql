"""
A Pokemon creature - the heart of the Pokemon world
"""
type Pokemon {
  id: ID!
  """
  Species name (e.g., Pikachu, Charizard)
  """
  name: String!
  """
  Pokemon can have one or two types
  """
  types: [PokemonType!]!
  """
  Base stats that determine Pokemon's potential in battle
  """
  stats: Stats!
  """
  Evolution chain information
  """
  evolution: Evolution
  """
  Special abilities that provide battle advantages
  """
  abilities: [Ability!]!
  """
  Battle moves this Pokemon knows
  """
  moves: [Move!]!
  """
  The trainer who owns this Pokemon
  """
  trainer: Trainer
  """
  Current level (1-100)
  """
  level: Int!
  """
  Experience points toward next level
  """
  experience: Int!
  """
  Rare alternate coloration
  """
  isShiny: Boolean!
  """
  Individual values - genetic potential
  """
  ivs: IVStats!
  """
  Personality trait affecting stat growth
  """
  nature: Nature!
  """
  Currently held item
  """
  heldItem: Item
  """
  Current ailment
  """
  status: StatusCondition
  """
  Bond with trainer (0-255)
  """
  friendship: Int!
  """
  Breeding details
  """
  breedingInfo: BreedingInfo!
  """
  Custom nickname given by trainer
  """
  nickname: String
  """
  Where this Pokemon was first encountered
  """
  captureLocation: Location
  """
  Gender of this Pokemon
  """
  gender: Gender
  """
  Current HP in battle
  """
  currentHp: Int!
  """
  Effort values from training
  """
  evs: EVStats!
  """
  Contest performance stats
  """
  contestStats: ContestStats
}

"""
Pokemon gender
"""
enum Gender {
  MALE
  FEMALE
  UNKNOWN
}

"""
Effort Values gained through training
"""
type EVStats {
  hp: Int!
  attack: Int!
  defense: Int!
  speed: Int!
  specialAttack: Int!
  specialDefense: Int!
}

"""
Stats for Pokemon contests
"""
type ContestStats {
  coolness: Int!
  beauty: Int!
  cuteness: Int!
  cleverness: Int!
  toughness: Int!
  sheen: Int!
}

"""
Location in the Pokemon world
"""
type Location {
  id: ID!
  name: String!
  region: Region!
  """
  Type of location
  """
  locationType: LocationType!
  """
  Wild Pokemon that can be found here
  """
  wildPokemon: [WildEncounter!]!
  """
  Trainers that can be battled here
  """
  trainers: [Trainer!]!
}

"""
Types of locations
"""
enum LocationType {
  ROUTE
  CITY
  CAVE
  FOREST
  MOUNTAIN
  LAKE
  OCEAN
  BUILDING
  SPECIAL
}

"""
Wild Pokemon encounter information
"""
type WildEncounter {
  pokemon: Pokemon!
  """
  Encounter rate percentage
  """
  rate: Float!
  """
  Level range
  """
  minLevel: Int!
  maxLevel: Int!
  """
  Required conditions
  """
  conditions: [EncounterCondition!]!
}

"""
Conditions for encountering Pokemon
"""
enum EncounterCondition {
  DAY
  NIGHT
  MORNING
  RAIN
  STORM
  SWARM
  RADAR
  SLOT_2_GAME
  RADIO
  SEASON_SPRING
  SEASON_SUMMER
  SEASON_AUTUMN
  SEASON_WINTER
}

"""
Evolution chain information
"""
type Evolution {
  """
  What this Pokemon evolves into
  """
  to: Pokemon
  """
  How this Pokemon evolves
  """
  method: EvolutionMethod!
  """
  Required level if applicable
  """
  level: Int
  """
  Required item if applicable
  """
  item: Item
  """
  Additional requirements
  """
  condition: String
  """
  What this Pokemon evolved from
  """
  from: Pokemon
}

"""
Methods of evolution
"""
enum EvolutionMethod {
  LEVEL_UP
  ITEM
  TRADE
  FRIENDSHIP
  LOCATION
  TIME_OF_DAY
  MOVE_KNOWN
  PARTY_POKEMON
  WEATHER
  HELD_ITEM
  GENDER
  STAT_BASED
  UNIQUE
}

"""
Base stats for Pokemon
"""
type Stats {
  hp: Int!
  attack: Int!
  defense: Int!
  speed: Int!
  specialAttack: Int!
  specialDefense: Int!
  """
  Total of all base stats
  """
  total: Int!
}

"""
Pokemon natures that affect stat growth
"""
enum Nature {
  HARDY
  LONELY
  BRAVE
  ADAMANT
  NAUGHTY
  BOLD
  DOCILE
  RELAXED
  IMPISH
  LAX
  TIMID
  HASTY
  SERIOUS
  JOLLY
  NAIVE
  MODEST
  MILD
  QUIET
  BASHFUL
  RASH
  CALM
  GENTLE
  SASSY
  CAREFUL
  QUIRKY
}

"""
Individual Values - Pokemon genetics
"""
type IVStats {
  hp: Int!
  attack: Int!
  defense: Int!
  speed: Int!
  specialAttack: Int!
  specialDefense: Int!
  """
  Whether IVs are perfect (31 in all stats)
  """
  isPerfect: Boolean!
}

"""
Pokemon trainers - the heroes of our story
"""
type Trainer {
  id: ID!
  """
  Trainer's display name
  """
  name: String!
  """
  Official trainer ID number
  """
  trainerId: String!
  """
  Gym badges collected
  """
  badges: [Badge!]!
  """
  All owned Pokemon
  """
  pokemon: [Pokemon!]!
  """
  Where the trainer began their journey
  """
  hometown: String!
  """
  Battle statistics
  """
  battleRecord: BattleRecord!
  """
  Inventory items
  """
  items: [InventoryItem!]!
  """
  Currency for purchases
  """
  money: Int!
  """
  Trainer specialization
  """
  trainerClass: TrainerClass!
  """
  Active battle team (max 6)
  """
  battleTeam: [Pokemon!]!
  """
  Trainer's current location
  """
  currentLocation: Location!
  """
  Play time in hours
  """
  playTime: Float!
  """
  Pokedex completion
  """
  pokedex: Pokedex!
  """
  Achievements earned
  """
  achievements: [Achievement!]!
  """
  Favorite Pokemon
  """
  favoritePokemon: Pokemon
  """
  Rival trainers
  """
  rivals: [Trainer!]!
}

"""
Achievement earned by trainers
"""
type Achievement {
  id: ID!
  name: String!
  description: String!
  """
  Achievement rarity
  """
  tier: AchievementTier!
  """
  When this was earned
  """
  earnedDate: String!
  """
  Reward for earning
  """
  reward: Item
}

"""
Achievement difficulty tiers
"""
enum AchievementTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
}

"""
Pokedex tracking information
"""
type Pokedex {
  """
  Total unique species seen
  """
  seen: Int!
  """
  Total unique species caught
  """
  caught: Int!
  """
  Completion percentage
  """
  completion: Float!
  """
  Regional dex completion
  """
  regionalCompletion: [RegionalDexCompletion!]!
}

"""
Regional Pokedex completion
"""
type RegionalDexCompletion {
  region: Region!
  seen: Int!
  caught: Int!
  total: Int!
}

"""
Item with quantity in inventory
"""
type InventoryItem {
  item: Item!
  quantity: Int!
}

"""
Different trainer classes
"""
enum TrainerClass {
  ACE_TRAINER
  POKEMON_BREEDER
  YOUNGSTER
  LASS
  VETERAN
  GYM_LEADER
  ELITE_FOUR
  CHAMPION
  SCIENTIST
  TEAM_ROCKET
  POKEMON_RANGER
  COORDINATOR
  COLLECTOR
  RUIN_MANIAC
  PSYCHIC
  HEX_MANIAC
  FAIRY_TALE_GIRL
  DRAGON_TAMER
}

"""
Items that can be used or held by Pokemon
"""
interface Item {
  id: ID!
  name: String!
  description: String!
  price: Int!
  """
  Item category for organization
  """
  category: ItemCategory!
  """
  Whether this item can be held
  """
  isHoldable: Boolean!
  """
  Whether this item is consumed on use
  """
  isConsumable: Boolean!
}

"""
Item categories
"""
enum ItemCategory {
  MEDICINE
  POKEBALL
  BERRY
  EVOLUTION
  HELD_ITEM
  TM_HM
  KEY_ITEM
  BATTLE_ITEM
  VALUABLE
}

"""
Medicine items for healing
"""
type HealingItem implements Item {
  id: ID!
  name: String!
  description: String!
  price: Int!
  category: ItemCategory!
  isHoldable: Boolean!
  isConsumable: Boolean!
  """
  HP restoration amount
  """
  hpRestore: Int
  """
  Status conditions cured
  """
  curesStatus: [StatusCondition!]
  """
  Whether it revives fainted Pokemon
  """
  revives: Boolean!
}

"""
Pokeballs for catching Pokemon
"""
type Pokeball implements Item {
  id: ID!
  name: String!
  description: String!
  price: Int!
  category: ItemCategory!
  isHoldable: Boolean!
  isConsumable: Boolean!
  """
  Base catch rate multiplier
  """
  catchRate: Float!
  """
  Special catch conditions
  """
  specialEffect: String
}

"""
Berries with various effects
"""
type Berry implements Item {
  id: ID!
  name: String!
  description: String!
  price: Int!
  category: ItemCategory!
  isHoldable: Boolean!
  isConsumable: Boolean!
  """
  Primary berry effect
  """
  effect: BerryEffect!
  """
  Effect potency
  """
  power: Int!
  """
  Flavor profile
  """
  flavors: BerryFlavors!
  """
  Growth time in hours
  """
  growthTime: Int!
}

"""
Berry flavor profile
"""
type BerryFlavors {
  spicy: Int!
  dry: Int!
  sweet: Int!
  bitter: Int!
  sour: Int!
}

"""
Evolution stones and items
"""
type EvolutionStone implements Item {
  id: ID!
  name: String!
  description: String!
  price: Int!
  category: ItemCategory!
  isHoldable: Boolean!
  isConsumable: Boolean!
  """
  Pokemon types this stone affects
  """
  evolvesTypes: [PokemonType!]!
  """
  Specific Pokemon this evolves
  """
  evolvesPokemon: [Pokemon!]!
}

"""
Technical/Hidden Machines
"""
type TMItem implements Item {
  id: ID!
  name: String!
  description: String!
  price: Int!
  category: ItemCategory!
  isHoldable: Boolean!
  isConsumable: Boolean!
  """
  The move this TM teaches
  """
  move: Move!
  """
  Whether this is an HM (unforgetable)
  """
  isHM: Boolean!
  """
  TM number
  """
  number: Int!
}

"""
Berry effects when consumed
"""
enum BerryEffect {
  RESTORE_HP
  CURE_PARALYSIS
  CURE_BURN
  CURE_FREEZE
  CURE_POISON
  CURE_SLEEP
  CURE_CONFUSION
  CURE_ALL
  BOOST_ATTACK
  BOOST_DEFENSE
  BOOST_SPEED
  BOOST_SP_ATTACK
  BOOST_SP_DEFENSE
  BOOST_ACCURACY
  BOOST_CRITICAL
  RESIST_TYPE
}

"""
Status conditions affecting Pokemon
"""
enum StatusCondition {
  PARALYSIS
  BURN
  FREEZE
  POISON
  BADLY_POISONED
  SLEEP
  CONFUSION
  FAINTED
  CURSED
  NIGHTMARE
  TRAPPED
  IDENTIFIED
  PERISH_SONG
  INGRAIN
}

"""
Battle win/loss statistics
"""
type BattleRecord {
  wins: Int!
  losses: Int!
  draws: Int!
  """
  Current win streak
  """
  winStreak: Int!
  """
  Best win streak ever
  """
  bestWinStreak: Int!
  """
  Total battles fought
  """
  totalBattles: Int!
  """
  Win rate percentage
  """
  winRate: Float!
  """
  Battles by format
  """
  byFormat: [BattleFormatRecord!]!
}

"""
Battle statistics by format
"""
type BattleFormatRecord {
  format: BattleFormat!
  wins: Int!
  losses: Int!
  draws: Int!
}

"""
Gym badges - proof of a trainer's skill
"""
type Badge {
  id: ID!
  """
  Badge name (e.g., Boulder Badge)
  """
  name: String!
  """
  The gym leader defeated
  """
  gymLeader: Trainer!
  """
  Gym location
  """
  city: String!
  """
  Gym's type specialty
  """
  gymType: PokemonType!
  """
  When the badge was earned
  """
  earnedDate: String!
  """
  Gym challenge difficulty (1-8)
  """
  difficulty: Int!
  """
  Special effect granted by badge
  """
  effect: String!
  """
  Badge description
  """
  description: String!
}

"""
Pokemon abilities - passive battle effects
"""
type Ability {
  id: ID!
  name: String!
  description: String!
  """
  Hidden abilities are rarer
  """
  isHidden: Boolean!
  """
  Effect in battle
  """
  battleEffect: String!
  """
  Effect outside battle
  """
  overworldEffect: String
  """
  Pokemon that can have this ability
  """
  pokemon: [Pokemon!]!
}

"""
Battle moves Pokemon can learn
"""
type Move {
  id: ID!
  name: String!
  """
  Elemental type
  """
  type: PokemonType!
  """
  Damage amount (null for status moves)
  """
  power: Int
  """
  Hit chance percentage
  """
  accuracy: Int!
  """
  Power Points - usage limit
  """
  pp: Int!
  """
  Physical, Special, or Status
  """
  category: MoveCategory!
  """
  Move effect description
  """
  effect: String
  """
  Turn order modifier
  """
  priority: Int!
  """
  Critical hit chance multiplier
  """
  criticalHitRatio: Float!
  """
  Status condition inflicted
  """
  inflictsStatus: StatusCondition
  """
  Chance to inflict status
  """
  statusChance: Float
  """
  Number of hits (min-max)
  """
  hits: HitRange
  """
  Stat changes caused
  """
  statChanges: [StatChange!]
  """
  Move flags (contact, sound, etc)
  """
  flags: [MoveFlag!]!
  """
  Contest performance data
  """
  contestData: ContestMoveData
}

"""
Contest move performance
"""
type ContestMoveData {
  """
  Contest category
  """
  category: ContestCategory!
  """
  Appeal points
  """
  appeal: Int!
  """
  Jam points
  """
  jam: Int!
}

"""
Contest categories
"""
enum ContestCategory {
  COOL
  BEAUTIFUL
  CUTE
  CLEVER
  TOUGH
}

"""
Move hit range
"""
type HitRange {
  min: Int!
  max: Int!
}

"""
Stat modifications from moves
"""
type StatChange {
  stat: BattleStat!
  stages: Int!
  chance: Float!
}

"""
Stats that can be modified in battle
"""
enum BattleStat {
  ATTACK
  DEFENSE
  SPECIAL_ATTACK
  SPECIAL_DEFENSE
  SPEED
  ACCURACY
  EVASION
  CRITICAL
}

"""
Special properties of moves
"""
enum MoveFlag {
  CONTACT
  CHARGE
  RECHARGE
  PROTECT
  REFLECTABLE
  SNATCH
  MIRROR
  PUNCH
  SOUND
  GRAVITY
  DEFROST
  DISTANCE
  HEAL
  AUTHENTIC
  POWDER
  BITE
  PULSE
  BALLISTIC
  MENTAL
  NON_SKY_BATTLE
  DANCE
}

"""
Move damage categories
"""
enum MoveCategory {
  PHYSICAL
  SPECIAL
  STATUS
}

"""
Pokemon elemental types
"""
enum PokemonType {
  NORMAL
  FIRE
  WATER
  GRASS
  ELECTRIC
  PSYCHIC
  DARK
  FAIRY
  FIGHTING
  STEEL
  DRAGON
  GHOST
  ICE
  ROCK
  GROUND
  FLYING
  POISON
  BUG
}

"""
Pokemon battle in progress
"""
type Battle {
  id: ID!
  """
  First trainer
  """
  trainer1: Trainer!
  """
  Second trainer (null for wild battles)
  """
  trainer2: Trainer
  """
  Wild Pokemon (if applicable)
  """
  wildPokemon: Pokemon
  """
  Battle victor
  """
  winner: Trainer
  """
  Battle start time
  """
  startTime: String!
  """
  Battle end time
  """
  endTime: String
  """
  Battle ruleset
  """
  format: BattleFormat!
  """
  Current weather
  """
  weather: Weather
  """
  Current terrain
  """
  terrain: Terrain
  """
  Turn counter
  """
  turns: Int!
  """
  Battle event log
  """
  log: [BattleLogEntry!]!
  """
  Current field effects
  """
  fieldEffects: [FieldEffect!]!
  """
  Prize money or items
  """
  rewards: BattleRewards
  """
  Whether battle is ranked
  """
  isRanked: Boolean!
  """
  Spectator count
  """
  spectators: Int!
}

"""
Battle rewards for winning
"""
type BattleRewards {
  money: Int!
  experience: Int!
  items: [Item!]!
  catchOpportunity: Boolean!
}

"""
Active field effects
"""
type FieldEffect {
  """
  Effect type
  """
  type: FieldEffectType!
  """
  Turns remaining
  """
  turnsRemaining: Int
  """
  Which side is affected
  """
  side: BattleSide
}

"""
Types of field effects
"""
enum FieldEffectType {
  REFLECT
  LIGHT_SCREEN
  SAFEGUARD
  MIST
  TAILWIND
  LUCKY_CHANT
  SPIKES
  TOXIC_SPIKES
  STEALTH_ROCK
  STICKY_WEB
  AURORA_VEIL
  TRICK_ROOM
  WONDER_ROOM
  MAGIC_ROOM
  GRAVITY
}

"""
Side of the battle field
"""
enum BattleSide {
  PLAYER
  OPPONENT
  BOTH
}

"""
Battle log entry
"""
type BattleLogEntry {
  """
  Turn number
  """
  turn: Int!
  """
  Action description
  """
  action: String!
  """
  Damage dealt
  """
  damage: Int
  """
  Pokemon performing action
  """
  pokemon: Pokemon!
  """
  Target Pokemon
  """
  target: Pokemon
  """
  Move used
  """
  move: Move
  """
  Entry timestamp
  """
  timestamp: String!
}

"""
Battle terrain modifications
"""
enum Terrain {
  NORMAL
  ELECTRIC
  GRASSY
  MISTY
  PSYCHIC
}

"""
Weather conditions affecting battles
"""
enum Weather {
  CLEAR
  SUNNY
  RAIN
  SANDSTORM
  HAIL
  FOG
  HARSH_SUNLIGHT
  HEAVY_RAIN
  STRONG_WINDS
  EXTREMELY_HARSH_SUNLIGHT
  HEAVY_RAIN_PRIMAL
  MYSTERIOUS_AIR_CURRENT
}

"""
Different battle formats
"""
enum BattleFormat {
  SINGLE
  DOUBLE
  TRIPLE
  ROTATION
  HORDE
  RAID
  CONTEST
  BATTLE_ROYAL
  DYNAMAX_RAID
}

"""
Pokemon world regions
"""
enum Region {
  KANTO
  JOHTO
  HOENN
  SINNOH
  UNOVA
  KALOS
  ALOLA
  GALAR
  PALDEA
  HISUI
  ORRE
  FIORE
  ALMIA
  OBLIVIA
  RANSEI
}

"""
Egg groups for breeding
"""
enum EggGroup {
  MONSTER
  WATER_1
  WATER_2
  WATER_3
  BUG
  FLYING
  FIELD
  FAIRY
  GRASS
  HUMAN_LIKE
  MINERAL
  AMORPHOUS
  DRAGON
  DITTO
  NO_EGGS
  GENDER_UNKNOWN
}

"""
Pokemon breeding information
"""
type BreedingInfo {
  """
  Compatible egg groups
  """
  eggGroups: [EggGroup!]!
  """
  Steps to hatch
  """
  hatchTime: Int!
  """
  Gender distribution
  """
  genderRatio: GenderRatio!
  """
  Can breed with Ditto
  """
  canBreedWithDitto: Boolean!
  """
  Is baby Pokemon
  """
  isBaby: Boolean!
}

"""
Gender distribution for species
"""
type GenderRatio {
  """
  Male percentage (0-100)
  """
  malePercent: Float!
  """
  Female percentage (0-100)
  """
  femalePercent: Float!
  """
  Has no gender
  """
  genderless: Boolean!
}

"""
Main query root
"""
type Query {
  """
  Get a specific Pokemon
  """
  pokemon(id: ID!): Pokemon
  """
  List all Pokemon with pagination
  """
  allPokemon(
    limit: Int = 100
    offset: Int = 0
    sortBy: PokemonSortField
    filters: PokemonFilters
  ): PokemonConnection!
  """
  Search Pokemon by type
  """
  pokemonByType(type: PokemonType!, region: Region): [Pokemon!]!
  """
  Get ability information
  """
  ability(id: ID!): Ability
  """
  Get move information
  """
  move(id: ID!): Move
  """
  Get trainer profile
  """
  trainer(id: ID!): Trainer
  """
  Find Pokemon owned by trainer
  """
  pokemonByTrainer(trainerId: ID!): [Pokemon!]!
  """
  Active battles in progress
  """
  activeBattles(format: BattleFormat): [Battle!]!
  """
  Search for shiny Pokemon
  """
  shinyPokemon: [Pokemon!]!
  """
  Get item details
  """
  item(id: ID!): Item
  """
  Search Pokemon by nature
  """
  pokemonByNature(nature: Nature!): [Pokemon!]!
  """
  List all gym leaders
  """
  gymLeaders(region: Region): [Trainer!]!
  """
  Search Pokemon by ability
  """
  pokemonByAbility(abilityId: ID!): [Pokemon!]!
  """
  Check breeding compatibility
  """
  breedingCompatibility(pokemon1Id: ID!, pokemon2Id: ID!): BreedingCompatibility!
  """
  Get location information
  """
  location(id: ID!): Location
  """
  Search locations
  """
  locations(region: Region, type: LocationType): [Location!]!
  """
  Type effectiveness chart
  """
  typeMatchup(attackingType: PokemonType!, defendingTypes: [PokemonType!]!): TypeMatchup!
  """
  Get current events
  """
  activeEvents: [Event!]!
  """
  Leaderboard rankings
  """
  leaderboard(category: LeaderboardCategory!, limit: Int = 10): [LeaderboardEntry!]!
}

"""
Paginated Pokemon results
"""
type PokemonConnection {
  edges: [PokemonEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Pokemon result edge
"""
type PokemonEdge {
  node: Pokemon!
  cursor: String!
}

"""
Pagination information
"""
type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

"""
Pokemon filter options
"""
input PokemonFilters {
  types: [PokemonType!]
  abilities: [ID!]
  minLevel: Int
  maxLevel: Int
  isShiny: Boolean
  hasTrainer: Boolean
  region: Region
  eggGroups: [EggGroup!]
}

"""
Type effectiveness information
"""
type TypeMatchup {
  effectiveness: Float!
  description: String!
}

"""
Special events
"""
type Event {
  id: ID!
  name: String!
  description: String!
  startDate: String!
  endDate: String!
  rewards: [Item!]!
  specialPokemon: [Pokemon!]!
}

"""
Leaderboard categories
"""
enum LeaderboardCategory {
  TOTAL_WINS
  WIN_STREAK
  POKEDEX_COMPLETION
  SHINY_CAUGHT
  TOTAL_CAUGHT
  BATTLE_POINTS
  CONTEST_RIBBONS
}

"""
Leaderboard entry
"""
type LeaderboardEntry {
  rank: Int!
  trainer: Trainer!
  score: Int!
}

"""
Breeding compatibility check
"""
type BreedingCompatibility {
  """
  Can these Pokemon breed
  """
  compatible: Boolean!
  """
  Shared egg groups
  """
  sharedEggGroups: [EggGroup!]!
  """
  Possible egg moves
  """
  possibleEggMoves: [Move!]!
  """
  Offspring species
  """
  offspring: Pokemon
}

"""
Sort options for Pokemon
"""
enum PokemonSortField {
  NAME
  NUMBER
  TOTAL_STATS
  HP
  ATTACK
  DEFENSE
  SPEED
  SPECIAL_ATTACK
  SPECIAL_DEFENSE
  CATCH_RATE
  TYPE
}

"""
Main mutation root
"""
type Mutation {
  """
  Attempt to catch a wild Pokemon
  """
  catchPokemon(input: CatchPokemonInput!): CatchResult!
  """
  Teach a new move to a Pokemon
  """
  teachMove(pokemonId: ID!, moveId: ID!, replaceMove: ID): TeachMoveResult!
  """
  Register a new trainer account
  """
  registerTrainer(input: RegisterTrainerInput!): Trainer!
  """
  Start a Pokemon battle
  """
  startBattle(input: StartBattleInput!): Battle!
  """
  Make a move in battle
  """
  battleAction(input: BattleActionInput!): BattleActionResult!
  """
  End a battle
  """
  endBattle(battleId: ID!, forfeit: Boolean = false): Battle!
  """
  Use an item
  """
  useItem(itemId: ID!, target: ItemTarget!): UseItemResult!
  """
  Trade Pokemon between trainers
  """
  tradePokemon(input: TradePokemonInput!): TradeResult!
  """
  Evolve a Pokemon
  """
  evolvePokemon(pokemonId: ID!, method: EvolutionMethod!, itemId: ID): EvolveResult!
  """
  Breed two Pokemon
  """
  breedPokemon(parent1Id: ID!, parent2Id: ID!, itemId: ID): BreedResult!
  """
  Give a nickname to Pokemon
  """
  nicknamePokemon(pokemonId: ID!, nickname: String!): Pokemon!
  """
  Release a Pokemon
  """
  releasePokemon(pokemonId: ID!): ReleaseResult!
  """
  Challenge a gym leader
  """
  challengeGym(gymLeaderId: ID!): Battle!
  """
  Enter a contest
  """
  enterContest(pokemonId: ID!, category: ContestCategory!): ContestResult!
  """
  Purchase items from shop
  """
  purchaseItems(items: [PurchaseItemInput!]!): PurchaseResult!
  """
  Heal Pokemon at Pokemon Center
  """
  healPokemon(pokemonIds: [ID!]!): HealResult!
  """
  Save game progress
  """
  saveGame: SaveResult!
}

"""
Catch Pokemon input
"""
input CatchPokemonInput {
  pokemonId: ID!
  trainerId: ID!
  pokeballId: ID!
  location: ID!
}

"""
Item usage target
"""
input ItemTarget {
  pokemonId: ID
  moveId: ID
  trainerId: ID
}

"""
Battle action input
"""
input BattleActionInput {
  battleId: ID!
  action: BattleActionType!
  moveId: ID
  targetId: ID
  itemId: ID
  switchToPokemonId: ID
}

"""
Types of battle actions
"""
enum BattleActionType {
  USE_MOVE
  USE_ITEM
  SWITCH_POKEMON
  RUN
}

"""
Battle action result
"""
type BattleActionResult {
  success: Boolean!
  battle: Battle!
  damage: Int
  effects: [String!]!
  nextTurn: Boolean!
}

"""
Trade input
"""
input TradePokemonInput {
  trader1Id: ID!
  trader2Id: ID!
  pokemon1Id: ID!
  pokemon2Id: ID!
  item1Id: ID
  item2Id: ID
}

"""
Contest performance result
"""
type ContestResult {
  placement: Int!
  score: Int!
  ribbon: Item
  rewards: [Item!]!
}

"""
Purchase input
"""
input PurchaseItemInput {
  itemId: ID!
  quantity: Int!
}

"""
Purchase result
"""
type PurchaseResult {
  success: Boolean!
  items: [InventoryItem!]!
  totalCost: Int!
  remainingMoney: Int!
}

"""
Heal result
"""
type HealResult {
  success: Boolean!
  healedPokemon: [Pokemon!]!
  cost: Int!
}

"""
Save game result
"""
type SaveResult {
  success: Boolean!
  saveId: String!
  timestamp: String!
}

"""
Release Pokemon result
"""
type ReleaseResult {
  success: Boolean!
  message: String!
  farewell: String!
}

"""
Battle start input
"""
input StartBattleInput {
  trainer1Id: ID!
  trainer2Id: ID
  format: BattleFormat!
  weather: Weather
  terrain: Terrain
  timeLimit: Int
  wagerAmount: Int
  isRanked: Boolean
}

"""
Trainer registration input
"""
input RegisterTrainerInput {
  name: String!
  hometown: String!
  startingRegion: Region!
  trainerClass: TrainerClass!
  startingPokemon: ID!
  favoriteType: PokemonType
}

"""
Result of catching attempt
"""
type CatchResult {
  success: Boolean!
  pokemon: Pokemon
  message: String!
  """
  Experience for participating Pokemon
  """
  experienceGained: Int!
  """
  Critical capture
  """
  criticalCapture: Boolean!
}

"""
Result of teaching move
"""
type TeachMoveResult {
  success: Boolean!
  pokemon: Pokemon
  move: Move
  replacedMove: Move
  message: String!
}

"""
Result of using item
"""
type UseItemResult {
  success: Boolean!
  message: String!
  target: Pokemon
  consumed: Boolean!
}

"""
Result of Pokemon trade
"""
type TradeResult {
  success: Boolean!
  pokemon1: Pokemon!
  pokemon2: Pokemon!
  message: String!
  """
  Pokemon that evolved via trade
  """
  evolutions: [Pokemon!]
}

"""
Result of evolution
"""
type EvolveResult {
  success: Boolean!
  evolvedPokemon: Pokemon
  message: String!
  """
  New moves learned
  """
  learnedMoves: [Move!]!
  """
  Stats before evolution
  """
  previousStats: Stats!
}

"""
Result of breeding
"""
type BreedResult {
  success: Boolean!
  egg: Pokemon
  message: String!
  """
  Egg hatching time
  """
  hatchTime: Int!
  """
  Inherited moves
  """
  inheritedMoves: [Move!]!
  """
  Inherited ability
  """
  inheritedAbility: Ability!
  """
  Inherited IVs
  """
  inheritedIVs: IVStats!
}

"""
Main subscription root
"""
type Subscription {
  """
  Real-time battle updates
  """
  battleUpdates(battleId: ID!): BattleUpdate!
  """
  New Pokemon sightings
  """
  pokemonSighted(region: Region!): PokemonSighting!
  """
  Incoming trade requests
  """
  tradeRequests(trainerId: ID!): TradeRequest!
  """
  Egg hatching progress
  """
  eggHatching(trainerId: ID!): EggHatchUpdate!
  """
  Global announcements
  """
  globalAnnouncements: Announcement!
  """
  Friend activity updates
  """
  friendActivity(trainerId: ID!): FriendUpdate!
  """
  Weather changes
  """
  weatherUpdates(locationId: ID!): WeatherUpdate!
}

"""
Pokemon sighting alert
"""
type PokemonSighting {
  pokemon: Pokemon!
  location: Location!
  rarity: Rarity!
  expiresAt: String!
}

"""
Pokemon rarity tiers
"""
enum Rarity {
  COMMON
  UNCOMMON
  RARE
  VERY_RARE
  LEGENDARY
  MYTHICAL
}

"""
Real-time battle update
"""
type BattleUpdate {
  battleId: ID!
  turn: Int!
  action: String!
  """
  Active Pokemon for each trainer
  """
  activePokemon: [Pokemon!]!
  """
  Field state
  """
  fieldState: FieldState!
  """
  Is battle over
  """
  isComplete: Boolean!
}

"""
Current field state
"""
type FieldState {
  weather: Weather!
  terrain: Terrain
  fieldEffects: [FieldEffect!]!
}

"""
Trade request notification
"""
type TradeRequest {
  id: ID!
  fromTrainer: Trainer!
  toTrainer: Trainer!
  offeredPokemon: Pokemon!
  requestedPokemon: Pokemon
  offeredItem: Item
  status: TradeStatus!
  expiresAt: String!
  message: String
}

"""
Trade request status
"""
enum TradeStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  EXPIRED
  COMPLETED
}

"""
Egg hatching update
"""
type EggHatchUpdate {
  egg: Pokemon!
  stepsRemaining: Int!
  percentComplete: Float!
  estimatedHatchTime: String!
  """
  Special message
  """
  message: String
}

"""
Global announcement
"""
type Announcement {
  id: ID!
  title: String!
  message: String!
  type: AnnouncementType!
  priority: Priority!
  expiresAt: String
}

"""
Types of announcements
"""
enum AnnouncementType {
  EVENT
  MAINTENANCE
  UPDATE
  TOURNAMENT
  SPECIAL_SPAWN
}

"""
Message priority levels
"""
enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

"""
Friend activity update
"""
type FriendUpdate {
  friend: Trainer!
  action: FriendAction!
  details: String!
  timestamp: String!
}

"""
Friend actions
"""
enum FriendAction {
  CAUGHT_POKEMON
  WON_BATTLE
  EARNED_BADGE
  EVOLVED_POKEMON
  FOUND_SHINY
  COMPLETED_POKEDEX
  WON_TOURNAMENT
}

"""
Weather change notification
"""
type WeatherUpdate {
  location: Location!
  previousWeather: Weather!
  newWeather: Weather!
  duration: Int!
  affectedPokemon: [Pokemon!]!
}

"""
Input for creating new Pokemon
"""
input CreatePokemonInput {
  name: String!
  types: [PokemonType!]!
  stats: StatsInput!
  nature: Nature!
  abilities: [ID!]!
  gender: Gender!
  isShiny: Boolean
}

"""
Stats input
"""
input StatsInput {
  hp: Int!
  attack: Int!
  defense: Int!
  speed: Int!
  specialAttack: Int!
  specialDefense: Int!
}

directive @auth(role: String!) on FIELD_DEFINITION
directive @cache(ttl: Int!) on FIELD_DEFINITION
directive @rateLimit(limit: Int!, duration: Int!) on FIELD_DEFINITION
directive @complexity(value: Int!) on FIELD_DEFINITION
directive @deprecated(reason: String = "No longer supported") on FIELD_DEFINITION | ENUM_VALUE