🚀 GraphQL Semantic Joining Sandbox - Refined Version
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📋 Query:
query GetPokemon($id: ID!) {
  pokemon(id: $id) {
    name
    type
    abilities {
      name
      effect
    }
    stats {
      hp
      attack
    }
  }
}

🌳 Step 1: Tree-sitter Parsing
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Found 32 tokens
┌─────────┬──────────────┬─────────┬────────────────────────┬──────────┐
│ (index) │ text         │ type    │ parent                 │ position │
├─────────┼──────────────┼─────────┼────────────────────────┼──────────┤
│ 0       │ 'query'      │ 'query' │ 'operation_type'       │ '0-5'    │
│ 1       │ 'GetPokemon' │ 'name'  │ 'operation_definition' │ '6-16'   │
│ 2       │ '('          │ '('     │ 'variable_definitions' │ '16-17'  │
│ 3       │ '$'          │ '$'     │ 'variable'             │ '17-18'  │
│ 4       │ 'id'         │ 'name'  │ 'variable'             │ '18-20'  │
│ 5       │ ':'          │ ':'     │ 'variable_definition'  │ '20-21'  │
│ 6       │ 'ID'         │ 'name'  │ 'named_type'           │ '22-24'  │
│ 7       │ '!'          │ '!'     │ 'non_null_type'        │ '24-25'  │
│ 8       │ ')'          │ ')'     │ 'variable_definitions' │ '25-26'  │
│ 9       │ '{'          │ '{'     │ 'selection_set'        │ '27-28'  │
└─────────┴──────────────┴─────────┴────────────────────────┴──────────┘

🧠 Step 2: GraphQL Semantic Analysis
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Found 13 semantic nodes
┌─────────┬──────────┬─────────────────────┬─────────────────────┐
│ (index) │ position │ kind                │ details             │
├─────────┼──────────┼─────────────────────┼─────────────────────┤
│ 0       │ 6        │ 'Operation'         │ 'GetPokemon'        │
│ 1       │ 17       │ 'Variable'          │ 'id'                │
│ 2       │ 22       │ 'GraphQLScalarType' │ 'ID'                │
│ 3       │ 31       │ 'OutputField'       │ 'Query.pokemon'     │
│ 4       │ 43       │ 'Variable'          │ 'id'                │
│ 5       │ 54       │ 'OutputField'       │ 'Pokemon.name'      │
│ 6       │ 63       │ 'OutputField'       │ 'Pokemon.type'      │
│ 7       │ 72       │ 'OutputField'       │ 'Pokemon.abilities' │
│ 8       │ 90       │ 'OutputField'       │ 'Ability.name'      │
│ 9       │ 101      │ 'OutputField'       │ 'Ability.effect'    │
└─────────┴──────────┴─────────────────────┴─────────────────────┘

🔗 Step 3: Creating Unified Tokens
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Unified tokens with computed properties:
┌─────────┬──────────────┬─────────┬─────────────────────┬─────────────┬────────────────────────────┬──────────────────┐
│ (index) │ text         │ tsType  │ semanticKind        │ interactive │ url                        │ cssClass         │
├─────────┼──────────────┼─────────┼─────────────────────┼─────────────┼────────────────────────────┼──────────────────┤
│ 0       │ 'query'      │ 'query' │ 'none'              │ '❌'        │ '-'                        │ 'keyword'        │
│ 1       │ 'GetPokemon' │ 'name'  │ 'Operation'         │ '❌'        │ '-'                        │ 'operation-name' │
│ 2       │ '('          │ '('     │ 'none'              │ '❌'        │ '-'                        │ 'punctuation'    │
│ 3       │ '$'          │ '$'     │ 'Variable'          │ '❌'        │ '-'                        │ 'text'           │
│ 4       │ 'id'         │ 'name'  │ 'none'              │ '❌'        │ '-'                        │ 'text'           │
│ 5       │ ':'          │ ':'     │ 'none'              │ '❌'        │ '-'                        │ 'punctuation'    │
│ 6       │ 'ID'         │ 'name'  │ 'GraphQLScalarType' │ '✅'        │ '/reference/scalars#ID'    │ 'type-name'      │
│ 7       │ '!'          │ '!'     │ 'none'              │ '❌'        │ '-'                        │ 'punctuation'    │
│ 8       │ ')'          │ ')'     │ 'none'              │ '❌'        │ '-'                        │ 'punctuation'    │
│ 9       │ '{'          │ '{'     │ 'none'              │ '❌'        │ '-'                        │ 'punctuation'    │
│ 10      │ 'pokemon'    │ 'name'  │ 'OutputField'       │ '✅'        │ '/reference/Query#pokemon' │ 'field-name'     │
│ 11      │ '('          │ '('     │ 'none'              │ '❌'        │ '-'                        │ 'punctuation'    │
│ 12      │ 'id'         │ 'name'  │ 'none'              │ '❌'        │ '-'                        │ 'text'           │
│ 13      │ ':'          │ ':'     │ 'none'              │ '❌'        │ '-'                        │ 'punctuation'    │
│ 14      │ '$'          │ '$'     │ 'Variable'          │ '❌'        │ '-'                        │ 'text'           │
└─────────┴──────────────┴─────────┴─────────────────────┴─────────────┴────────────────────────────┴──────────────────┘

📍 Key Examples:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

"GetPokemon"
  TS type: name
  Semantic: Operation
  Interactive: false
  URL: none
  CSS: operation-name

"pokemon"
  TS type: name
  Semantic: OutputField
  Interactive: true
  URL: /reference/Query#pokemon
  CSS: field-name

"name"
  TS type: name
  Semantic: OutputField
  Interactive: true
  URL: /reference/Pokemon#name
  CSS: field-name

"abilities"
  TS type: name
  Semantic: OutputField
  Interactive: true
  URL: /reference/Pokemon#abilities
  CSS: field-name

💡 Architecture Summary:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1. Tree-sitter nodes provide positions and syntax structure
2. Semantic nodes are either GraphQL classes or our thin wrappers
3. Unified tokens hold references, not copies
4. Plugin functions compute properties on-demand
5. Type discrimination uses instanceof for GraphQL types, kind for our types
