name: GitHub Pages
description: Deploy to GitHub Pages with deployment tracking
inputs:
  github_token:
    description: GitHub token
    required: true
  publish_dir:
    description: Directory to publish
    required: true
  destination_dir:
    description: Destination directory in gh-pages
    required: false
    default: .
  keep_files:
    description: Keep existing files
    required: false
    default: "false"
  user_name:
    description: Git user name
    required: false
    default: "github-actions[bot]"
  user_email:
    description: Git user email
    required: false
    default: "github-actions[bot]@users.noreply.github.com"
  commit_message:
    description: Commit message
    required: false
    default: "Deploy to GitHub Pages"
  environment:
    description: Deployment environment name
    required: false
    default: "github-pages"
  pr_number:
    description: PR number for PR deployments
    required: false
  deployment_url:
    description: The URL where the deployment will be accessible
    required: false

outputs:
  deployment_url:
    description: The URL where the deployment is accessible
    value: ${{ steps.deployment_url.outputs.url }}

runs:
  using: composite
  steps:
    - name: Create deployment
      id: create_deployment
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          // Determine environment name
          const prNumber = '${{ inputs.pr_number }}';
          const environment = prNumber ? `pr-${prNumber}` : '${{ inputs.environment }}';
          
          // Create deployment
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: environment,
            description: '${{ inputs.commit_message }}',
            auto_merge: false,
            required_contexts: [],
            production_environment: !prNumber
          });
          
          console.log(`Created deployment ${deployment.data.id} for environment ${environment}`);
          core.setOutput('deployment_id', deployment.data.id);
          core.setOutput('environment', environment);
          
          // Set initial status
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: 'in_progress',
            description: 'Deploying to GitHub Pages'
          });

    - name: Deploy to GitHub Pages
      id: deploy_pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ inputs.github_token }}
        publish_dir: ${{ inputs.publish_dir }}
        destination_dir: ${{ inputs.destination_dir }}
        keep_files: ${{ inputs.keep_files }}
        user_name: ${{ inputs.user_name }}
        user_email: ${{ inputs.user_email }}
        commit_message: ${{ inputs.commit_message }}
        publish_branch: gh-pages

    - name: Update deployment status
      if: always()
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const deploymentId = '${{ steps.create_deployment.outputs.deployment_id }}';
          const environment = '${{ steps.create_deployment.outputs.environment }}';
          const deploymentUrl = '${{ inputs.deployment_url }}';
          
          // Determine final status based on previous step outcome
          const success = '${{ steps.deploy_pages.outcome }}' === 'success';
          
          // Construct environment URL if not provided
          let environmentUrl = deploymentUrl;
          if (!environmentUrl) {
            const baseUrl = `https://${context.repo.owner}.github.io/${context.repo.repo}`;
            const prNumber = '${{ inputs.pr_number }}';
            if (prNumber) {
              environmentUrl = `${baseUrl}/pr-${prNumber}/`;
            } else {
              environmentUrl = baseUrl;
            }
          }
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: parseInt(deploymentId),
            state: success ? 'success' : 'failure',
            description: success ? 'Deployed successfully' : 'Deployment failed',
            environment_url: environmentUrl
          });
          
          console.log(`Deployment ${deploymentId} marked as ${success ? 'success' : 'failure'}`);
          if (environmentUrl) {
            console.log(`Deployment URL: ${environmentUrl}`);
          }
          
          // Fail the action if deployment failed
          if (!success) {
            core.setFailed('GitHub Pages deployment failed');
          }
          
    - name: Set deployment URL output
      id: deployment_url
      shell: bash
      run: |
        DEPLOYMENT_URL="${{ inputs.deployment_url }}"
        if [ -z "$DEPLOYMENT_URL" ]; then
          BASE_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          PR_NUMBER="${{ inputs.pr_number }}"
          if [ -n "$PR_NUMBER" ]; then
            DEPLOYMENT_URL="$BASE_URL/pr-$PR_NUMBER/"
          else
            DEPLOYMENT_URL="$BASE_URL"
          fi
        fi
        echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT