name: demos-release-semver

on:
  release:
    types: [published, edited]
  workflow_dispatch:
    inputs:
      tag:
        description: "Release semver tag to build demos for (e.g. 1.2.0, 0.8.0-next.1, ...)"
        required: true
        type: string

permissions:
  contents: write
  pages: write
  statuses: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name || inputs.tag }}

      - name: Setup
        uses: ./.github/actions/setup

      - name: Update CI logic
        uses: ./.github/actions/update-ci

      - name: Extract release info
        id: release
        uses: actions/github-script@v7
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          INPUT_TAG: ${{ inputs.tag }}
          GITHUB_RELEASE_TAG_NAME: ${{ github.event.release.tag_name }}
          GITHUB_RELEASE_PRERELEASE: ${{ github.event.release.prerelease }}
          GITHUB_EVENT_ACTION: ${{ github.event.action }}
        with:
          script: |
            const { default: script } = await import('${{ github.workspace }}/.github/scripts/steps/extract-release-info.js')
            return script({ github, context, core, exec })

      - name: Build Polen
        if: steps.release.outputs.needs_build == 'true'
        run: pnpm build

      - name: Re-install to link workspace packages
        if: steps.release.outputs.needs_build == 'true'
        run: pnpm install

      - name: Build demos for release
        if: steps.release.outputs.needs_build == 'true'
        uses: actions/github-script@v7
        env:
          ACTUAL_TAG: ${{ steps.release.outputs.actual_tag }}
        with:
          script: |
            const { default: script } = await import('${{ github.workspace }}/.github/workflow-steps/demos-release-semver/build-demos.js')
            return script({ github, context, core, exec })

      - name: Checkout gh-pages
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages

      - name: Deploy release demos
        if: steps.release.outputs.needs_build == 'true'
        run: |
          TAG="${{ steps.release.outputs.actual_tag }}"

          # Get list of examples that are enabled for demos
          EXAMPLES=$(node ./.github/scripts/tools/get-demo-examples.js)

          # Copy built demos to semver paths
          for example in $EXAMPLES; do
            if [ -d "examples/$example/build" ]; then
              mkdir -p gh-pages/$TAG/$example
              cp -r examples/$example/build/* gh-pages/$TAG/$example/
            fi
          done

          # Create redirect for direct demo access at root
          # Examples:
          # - /polen/pokemon/ → /polen/latest/pokemon/ (convenience redirect)
          for example in $EXAMPLES; do
            mkdir -p gh-pages/$example
            cat > gh-pages/$example/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <title>Redirecting...</title>
            <meta http-equiv="refresh" content="0; url=/polen/latest/$example/">
            <script>window.location.replace("/polen/latest/$example/");</script>
          </head>
          <body>
            <p>Redirecting to <a href="/polen/latest/$example/">/latest/$example/</a>...</p>
          </body>
          </html>
          EOF
            # Replace $example in the heredoc content
            perl -i -pe "s/\\\$example/$example/g" gh-pages/$example/index.html
          done

      - name: Update dist-tag content
        if: steps.release.outputs.needs_build == 'true'
        run: |
          TAG="${{ steps.release.outputs.actual_tag }}"
          IS_PRERELEASE="${{ steps.release.outputs.is_prerelease }}"

          # Determine which dist-tag to update
          if [[ "$IS_PRERELEASE" == "true" ]]; then
            DIST_TAG="next"
          else
            DIST_TAG="latest"
          fi

          cd gh-pages

          # Remove old dist-tag directory if it exists
          if [ -d "$DIST_TAG" ]; then
            echo "Removing old $DIST_TAG directory"
            rm -rf "$DIST_TAG"
          fi

          # Copy the semver deployment to the dist-tag name
          echo "Copying $TAG to $DIST_TAG"
          cp -r "$TAG" "$DIST_TAG"

          # Update all base paths in the copied files
          echo "Updating base paths from /$TAG/ to /$DIST_TAG/"

          find "$DIST_TAG" -type f \( -name "*.html" -o -name "*.js" -o -name "*.css" -o -name "*.json" \) | while read file; do
            # Use perl for more reliable find/replace with special characters
            perl -i -pe "s|/polen/\Q$TAG\E/|/polen/$DIST_TAG/|g" "$file"
          done

          echo "✅ Successfully updated $DIST_TAG with content from $TAG"

      - name: Update demos index
        uses: actions/github-script@v7
        with:
          script: |
            const { default: script } = await import('${{ github.workspace }}/.github/scripts/steps/update-demos-index.js')
            return script({ github, context, core, exec })

      - name: Commit and deploy
        run: |
          cd gh-pages

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add .

          if [[ -n $(git status --porcelain) ]]; then
            # Use the original tag name for the commit message
            TAG="${{ steps.release.outputs.tag }}"
            ACTION="${{ steps.release.outputs.action }}"

            if [[ "$ACTION" == "edited" ]]; then
              git commit -m "chore: update demos for edited release $TAG"
            else
              git commit -m "chore: deploy demos for release $TAG"
            fi

            git push origin gh-pages
          else
            echo "No changes to deploy"
          fi

      - name: Add demos link to commit
        if: steps.release.outputs.needs_build == 'true'
        uses: actions/github-script@v7
        env:
          ACTUAL_TAG: ${{ steps.release.outputs.actual_tag }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_RELEASE_TARGET_COMMITISH: ${{ github.event.release.target_commitish }}
        with:
          script: |
            const { default: script } = await import('${{ github.workspace }}/.github/workflow-steps/demos-release-semver/add-demos-link.js')
            return script({ github, context, core, exec })
