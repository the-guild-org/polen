name: demos-release-semver

on:
  release:
    types: [published, edited]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to build demos for (e.g., 1.2.0 or latest)'
        required: true
        type: string

permissions:
  contents: write
  pages: write
  statuses: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name || inputs.tag }}

      - name: Setup
        uses: ./.github/actions/setup

      - name: Update workflow scripts from main
        run: |
          # Save the current tag/branch
          CURRENT_REF=$(git rev-parse HEAD)
          
          # Fetch main branch
          git fetch origin main
          
          # Checkout scripts from main to get latest fixes
          git checkout origin/main -- .github/scripts
          git checkout origin/main -- .github/actions
          
          # Reset to avoid committing these changes
          git reset HEAD

      - name: Extract release info
        id: release
        run: |
          # Handle both release events and manual triggers
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ inputs.tag }}"
            ACTION="manual"
            
            # Determine if it's a prerelease based on tag format
            if [[ "$TAG" =~ -[a-zA-Z] ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          else
            TAG="${{ github.event.release.tag_name }}"
            IS_PRERELEASE="${{ github.event.release.prerelease }}"
            ACTION="${{ github.event.action }}"
          fi
          
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "action=$ACTION" >> $GITHUB_OUTPUT
          
          # For the "next" release being edited, we need to find the actual semver tag
          if [[ "$TAG" == "next" ]] && [[ "$ACTION" == "edited" ]]; then
            echo "is_dist_tag=true" >> $GITHUB_OUTPUT
            
            # Get the commit this release points to
            COMMIT=$(git rev-list -n 1 $TAG)
            echo "Next tag points to commit: $COMMIT"
            
            # Find the semver prerelease tag for this commit
            ALL_TAGS=$(git tag --points-at $COMMIT)
            echo "All tags at this commit: $ALL_TAGS"
            
            SEMVER_TAG=$(echo "$ALL_TAGS" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+-' | head -1)
            
            if [ -n "$SEMVER_TAG" ]; then
              echo "✅ Found semver tag: $SEMVER_TAG"
              echo "actual_tag=$SEMVER_TAG" >> $GITHUB_OUTPUT
              echo "needs_build=true" >> $GITHUB_OUTPUT
            else
              echo "❌ No semver tag found for next release"
              echo "needs_build=false" >> $GITHUB_OUTPUT
            fi
          elif [[ "$TAG" == "latest" ]]; then
            # Skip latest tag updates
            echo "is_dist_tag=true" >> $GITHUB_OUTPUT
            echo "needs_build=false" >> $GITHUB_OUTPUT
          else
            # Regular semver releases
            echo "is_dist_tag=false" >> $GITHUB_OUTPUT
            echo "actual_tag=$TAG" >> $GITHUB_OUTPUT
            echo "needs_build=true" >> $GITHUB_OUTPUT
          fi

      - name: Build Polen
        if: steps.release.outputs.needs_build == 'true'
        run: pnpm build

      - name: Re-install to link workspace packages
        if: steps.release.outputs.needs_build == 'true'
        run: pnpm install

      - name: Build demos for release
        if: steps.release.outputs.needs_build == 'true'
        run: |
          TAG="${{ steps.release.outputs.actual_tag }}"
          
          # Get list of examples that are enabled for demos
          EXAMPLES=$(node ./.github/scripts/tools/get-demo-examples.js)
          echo "Found demo-enabled examples: $EXAMPLES"
          
          # Build each example at the semver path
          for example in $EXAMPLES; do
            echo "Building $example for release $TAG"
            pnpm --dir examples/$example build --base "/polen/$TAG/$example/"
          done

      - name: Checkout gh-pages
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages

      - name: Deploy release demos
        if: steps.release.outputs.needs_build == 'true'
        run: |
          TAG="${{ steps.release.outputs.actual_tag }}"
          
          # Get list of examples that are enabled for demos
          EXAMPLES=$(node ./.github/scripts/tools/get-demo-examples.js)
          
          # Copy built demos to semver paths
          for example in $EXAMPLES; do
            if [ -d "examples/$example/build" ]; then
              mkdir -p gh-pages/$TAG/$example
              cp -r examples/$example/build/* gh-pages/$TAG/$example/
            fi
          done
          
          # Create redirect for direct demo access at root
          # Examples:
          # - /polen/pokemon/ → /polen/latest/pokemon/ (convenience redirect)
          for example in $EXAMPLES; do
            mkdir -p gh-pages/$example
            cat > gh-pages/$example/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <title>Redirecting...</title>
            <meta http-equiv="refresh" content="0; url=/polen/latest/$example/">
            <script>window.location.replace("/polen/latest/$example/");</script>
          </head>
          <body>
            <p>Redirecting to <a href="/polen/latest/$example/">/latest/$example/</a>...</p>
          </body>
          </html>
          EOF
            # Replace $example in the heredoc content
            sed -i "s/\$example/$example/g" gh-pages/$example/index.html
          done


      - name: Update dist-tag content
        if: steps.release.outputs.needs_build == 'true'
        run: |
          TAG="${{ steps.release.outputs.actual_tag }}"
          IS_PRERELEASE="${{ steps.release.outputs.is_prerelease }}"
          
          # Determine which dist-tag to update
          if [[ "$IS_PRERELEASE" == "true" ]]; then
            DIST_TAG="next"
          else
            DIST_TAG="latest"
          fi
          
          cd gh-pages
          
          # Remove old dist-tag directory if it exists
          if [ -d "$DIST_TAG" ]; then
            echo "Removing old $DIST_TAG directory"
            rm -rf "$DIST_TAG"
          fi
          
          # Copy the semver deployment to the dist-tag name
          echo "Copying $TAG to $DIST_TAG"
          cp -r "$TAG" "$DIST_TAG"
          
          # Update all base paths in the copied files
          echo "Updating base paths from /$TAG/ to /$DIST_TAG/"
          find "$DIST_TAG" -type f \( -name "*.html" -o -name "*.js" -o -name "*.css" -o -name "*.json" \) | while read file; do
            sed -i "s|/polen/$TAG/|/polen/$DIST_TAG/|g" "$file"
          done
          
          echo "✅ Successfully updated $DIST_TAG with content from $TAG"

      - name: Update demos index
        uses: actions/github-script@v7
        with:
          script: |
            const { default: script } = await import('${{ github.workspace }}/.github/scripts/steps/update-demos-index.js')
            return script({ github, context, core, exec })

      - name: Commit and deploy
        run: |
          cd gh-pages
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add .
          
          if [[ -n $(git status --porcelain) ]]; then
            # Use the original tag name for the commit message
            TAG="${{ steps.release.outputs.tag }}"
            ACTION="${{ steps.release.outputs.action }}"
            
            if [[ "$ACTION" == "edited" ]]; then
              git commit -m "chore: update demos for edited release $TAG"
            else
              git commit -m "chore: deploy demos for release $TAG"
            fi
            
            git push origin gh-pages
          else
            echo "No changes to deploy"
          fi

      - name: Add demos link to commit
        if: steps.release.outputs.needs_build == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const tag = '${{ steps.release.outputs.actual_tag }}';
            const eventName = '${{ github.event_name }}';
            
            let sha;
            if (eventName === 'workflow_dispatch') {
              // For manual runs, get the commit SHA for the tag
              const { data: ref } = await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${tag}`
              });
              sha = ref.object.sha;
            } else {
              sha = '${{ github.event.release.target_commitish }}';
            }
            
            // Create a commit status with link to demos
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: sha,
              state: 'success',
              target_url: `https://${context.repo.owner}.github.io/polen/${tag}/`,
              description: `View demos for ${tag}`,
              context: 'polen/demos'
            });