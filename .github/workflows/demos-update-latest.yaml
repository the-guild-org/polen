name: demos-update-latest

on:
  push:
    branches: [main]
    paths:
      - 'examples/**'
      - '.github/demo-config.json'
      - '.github/scripts/tools/get-demo-examples.ts'
  workflow_dispatch:

permissions:
  contents: write
  pages: write

jobs:
  update-latest-demos:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Get versions to rebuild
        id: get-versions
        uses: ./.github/actions/run-workflow-step
        with:
          step: demos-update-latest/check-latest-tag.ts

      - name: Setup
        if: steps.get-versions.outputs.has_versions == 'true'
        uses: ./.github/actions/setup

      - name: Build Polen
        if: steps.get-versions.outputs.has_versions == 'true'
        run: pnpm build

      - name: Re-install to link workspace packages
        if: steps.get-versions.outputs.has_versions == 'true'
        run: pnpm install

      - name: Build demos
        if: steps.get-versions.outputs.has_versions == 'true'
        run: |
          # Parse versions from JSON output
          VERSIONS='${{ steps.get-versions.outputs.versions_to_rebuild }}'
          
          # Get list of examples that are enabled for demos
          EXAMPLES=$(node --no-warnings ./.github/scripts/tools/get-demo-examples.ts)
          echo "Building demos for examples: $EXAMPLES"
          
          # Build demos for each version
          echo "$VERSIONS" | jq -r '.[]' | while read version; do
            echo "\nBuilding demos for version $version..."
            
            # Determine base path
            if [[ "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              # Stable version - use 'latest' path
              BASE_PATH="/polen/latest"
              echo "Building demos landing page for latest..."
              node --no-warnings ./scripts/build-demos-home.ts --basePath "$BASE_PATH/"
            else
              # Prerelease - use version-specific path
              BASE_PATH="/polen/$version"
              echo "Building demos landing page for $version..."
              node --no-warnings ./scripts/build-demos-home.ts --basePath "$BASE_PATH/"
            fi
            
            # Build each example
            for example in $EXAMPLES; do
              echo "Building $example for $version..."
              cd examples/$example
              npx polen build --basePath "$BASE_PATH/$example/"
              cd ../..
            done
          done

      - name: Checkout gh-pages
        if: steps.get-versions.outputs.has_versions == 'true'
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages

      - name: Update demos
        if: steps.get-versions.outputs.has_versions == 'true'
        run: |
          cd gh-pages
          
          # Parse versions from JSON output
          VERSIONS='${{ steps.get-versions.outputs.versions_to_rebuild }}'
          EXAMPLES=$(node --no-warnings ../.github/scripts/tools/get-demo-examples.ts)
          
          # Update demos for each version
          echo "$VERSIONS" | jq -r '.[]' | while read version; do
            echo "\nUpdating demos for version $version..."
            
            # Determine target directory
            if [[ "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              # Stable version - update 'latest'
              TARGET_DIR="latest"
              if [ -d "$TARGET_DIR" ]; then
                echo "Removing old $TARGET_DIR directory"
                rm -rf "$TARGET_DIR"
              fi
            else
              # Prerelease - update version-specific directory
              TARGET_DIR="$version"
              if [ -d "$TARGET_DIR" ]; then
                echo "Removing old $TARGET_DIR directory"
                rm -rf "$TARGET_DIR"
              fi
            fi
            
            # Create target directory
            mkdir -p "$TARGET_DIR"
            
            # Copy demos landing page
            if [ -f "../dist-demos-home/index.html" ]; then
              cp ../dist-demos-home/index.html "$TARGET_DIR/"
            fi
            
            # Copy built demos
            for example in $EXAMPLES; do
              if [ -d "../examples/$example/build" ]; then
                mkdir -p "$TARGET_DIR/$example"
                cp -r "../examples/$example/build/"* "$TARGET_DIR/$example/"
              fi
            done
          done
          
          echo "âœ… Successfully updated demos"

      - name: Update demos home
        if: steps.get-versions.outputs.has_versions == 'true'
        uses: ./.github/actions/run-workflow-step
        with:
          step: shared/update-demos-home.ts
          inputs: |
            {
              "mode": "trunk",
              "output_dir": "gh-pages"
            }

      - name: Commit and deploy
        if: steps.get-versions.outputs.has_versions == 'true'
        run: |
          cd gh-pages

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add .

          if [[ -n $(git status --porcelain) ]]; then
            # Get description of what changed
            VERSIONS='${{ steps.get-versions.outputs.versions_to_rebuild }}'
            VERSION_COUNT=$(echo "$VERSIONS" | jq -r '. | length')
            CHANGED_FILES=$(git diff --cached --name-only | wc -l)
            
            git commit -m "chore: update demos for current development cycle

Updated demos to reflect current examples on main branch.
Versions rebuilt: $(echo "$VERSIONS" | jq -r '. | join(", ")')
Total files changed: ${CHANGED_FILES}"
            git push origin gh-pages
          else
            echo "No changes to deploy"
          fi
